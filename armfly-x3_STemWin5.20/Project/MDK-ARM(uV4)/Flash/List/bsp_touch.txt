; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\bsp_touch.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=..\output\bsp_touch.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\User\fatfs\src -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM4F -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F4XX -DARM_MATH_CM4 -D__CC_ARM ..\..\User\bsp_stm32f4xx\src\bsp_touch.c]
                          THUMB

                          AREA ||i.SPI_ShiftByte||, CODE, READONLY, ALIGN=2

                  SPI_ShiftByte PROC
;;;344    */
;;;345    static uint8_t SPI_ShiftByte(uint8_t _ucByte)
000000  b570              PUSH     {r4-r6,lr}
;;;346    {
000002  4604              MOV      r4,r0
;;;347    	uint8_t ucRxByte;
;;;348    
;;;349    	/* 等待发送缓冲区空 */
;;;350    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
000004  bf00              NOP      
                  |L1.6|
000006  2102              MOVS     r1,#2
000008  480a              LDR      r0,|L1.52|
00000a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L1.6|
;;;351    
;;;352    	/* 发送一个字节 */
;;;353    	SPI_I2S_SendData(SPI1, _ucByte);
000012  4621              MOV      r1,r4
000014  4807              LDR      r0,|L1.52|
000016  f7fffffe          BL       SPI_I2S_SendData
;;;354    
;;;355    	/* 等待数据接收完毕 */
;;;356    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
00001a  bf00              NOP      
                  |L1.28|
00001c  2101              MOVS     r1,#1
00001e  4805              LDR      r0,|L1.52|
000020  f7fffffe          BL       SPI_I2S_GetFlagStatus
000024  2800              CMP      r0,#0
000026  d0f9              BEQ      |L1.28|
;;;357    
;;;358    	/* 读取接收到的数据 */
;;;359    	ucRxByte = SPI_I2S_ReceiveData(SPI1);
000028  4802              LDR      r0,|L1.52|
00002a  f7fffffe          BL       SPI_I2S_ReceiveData
00002e  b2c5              UXTB     r5,r0
;;;360    
;;;361    	/* 返回读到的数据 */
;;;362    	return ucRxByte;
000030  4628              MOV      r0,r5
;;;363    }
000032  bd70              POP      {r4-r6,pc}
;;;364    
                          ENDP

                  |L1.52|
                          DCD      0x40013000

                          AREA ||i.SpiDelay||, CODE, READONLY, ALIGN=1

                  SpiDelay PROC
;;;372    */
;;;373    void SpiDelay(uint32_t DelayCnt)
000000  2100              MOVS     r1,#0
;;;374    {
;;;375    	uint32_t i;
;;;376    
;;;377    	for(i=0;i<DelayCnt;i++);
000002  e000              B        |L2.6|
                  |L2.4|
000004  1c49              ADDS     r1,r1,#1
                  |L2.6|
000006  4281              CMP      r1,r0
000008  d3fc              BCC      |L2.4|
;;;378    }
00000a  4770              BX       lr
;;;379    
                          ENDP


                          AREA ||i.TOUCH_Abs||, CODE, READONLY, ALIGN=1

                  TOUCH_Abs PROC
;;;425    */
;;;426    int32_t TOUCH_Abs(int32_t x)
000000  4601              MOV      r1,r0
;;;427    {
;;;428    	if (x >= 0)
000002  2900              CMP      r1,#0
000004  db01              BLT      |L3.10|
;;;429    	{
;;;430    		return x;
000006  4608              MOV      r0,r1
                  |L3.8|
;;;431    	}
;;;432    	else
;;;433    	{
;;;434    		return -x;
;;;435    	}
;;;436    }
000008  4770              BX       lr
                  |L3.10|
00000a  4248              RSBS     r0,r1,#0              ;434
00000c  e7fc              B        |L3.8|
;;;437    
                          ENDP


                          AREA ||i.TOUCH_DataFilter||, CODE, READONLY, ALIGN=2

                  TOUCH_DataFilter PROC
;;;121    #define XPT2046_LOST_VAL      1	  	
;;;122    uint16_t TOUCH_DataFilter(uint8_t _ucCh)
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;123    {
000004  4680              MOV      r8,r0
;;;124    	uint16_t i, j;
;;;125    	uint16_t buf[XPT2046_READ_TIMES];
;;;126    	uint16_t usSum;
;;;127    	uint16_t usTemp;
;;;128    
;;;129    	/* 读取READ_TIMES次数据*/
;;;130    	for(i=0; i < XPT2046_READ_TIMES; i++)
000006  2400              MOVS     r4,#0
000008  e017              B        |L4.58|
                  |L4.10|
;;;131    	{
;;;132    		if (g_ChipID == IC_8875)
00000a  4823              LDR      r0,|L4.152|
00000c  8800              LDRH     r0,[r0,#0]  ; g_ChipID
00000e  2875              CMP      r0,#0x75
000010  d10c              BNE      |L4.44|
;;;133    	    {
;;;134    			if(_ucCh == ADC_CH_X)
000012  f1b80f01          CMP      r8,#1
000016  d104              BNE      |L4.34|
;;;135    			{
;;;136    				buf[i] = RA8875_TouchReadY();
000018  f7fffffe          BL       RA8875_TouchReadY
00001c  f82d0014          STRH     r0,[sp,r4,LSL #1]
000020  e009              B        |L4.54|
                  |L4.34|
;;;137    			}
;;;138    			else
;;;139    			{
;;;140    				buf[i] = RA8875_TouchReadX();	
000022  f7fffffe          BL       RA8875_TouchReadX
000026  f82d0014          STRH     r0,[sp,r4,LSL #1]
00002a  e004              B        |L4.54|
                  |L4.44|
;;;141    			}
;;;142    		}
;;;143    		else
;;;144    		{
;;;145    			buf[i] = TSC2046_ReadAdc(_ucCh);	
00002c  4640              MOV      r0,r8
00002e  f7fffffe          BL       TSC2046_ReadAdc
000032  f82d0014          STRH     r0,[sp,r4,LSL #1]
                  |L4.54|
000036  1c60              ADDS     r0,r4,#1              ;130
000038  b284              UXTH     r4,r0                 ;130
                  |L4.58|
00003a  2c05              CMP      r4,#5                 ;130
00003c  dbe5              BLT      |L4.10|
;;;146    		}	
;;;147    	}
;;;148    	
;;;149    	/* 升序排列 */		 		    
;;;150    	for(i = 0; i < XPT2046_READ_TIMES - 1; i++)
00003e  2400              MOVS     r4,#0
000040  e016              B        |L4.112|
                  |L4.66|
;;;151    	{
;;;152    		for(j = i + 1; j < XPT2046_READ_TIMES; j++)
000042  1c60              ADDS     r0,r4,#1
000044  b285              UXTH     r5,r0
000046  e00f              B        |L4.104|
                  |L4.72|
;;;153    		{
;;;154    			if(buf[i] > buf[j])
000048  f83d0014          LDRH     r0,[sp,r4,LSL #1]
00004c  f83d1015          LDRH     r1,[sp,r5,LSL #1]
000050  4288              CMP      r0,r1
000052  dd07              BLE      |L4.100|
;;;155    			{
;;;156    				usTemp = buf[i];
000054  f83d7014          LDRH     r7,[sp,r4,LSL #1]
;;;157    				buf[i] = buf[j];
000058  f83d0015          LDRH     r0,[sp,r5,LSL #1]
00005c  f82d0014          STRH     r0,[sp,r4,LSL #1]
;;;158    				buf[j] = usTemp;
000060  f82d7015          STRH     r7,[sp,r5,LSL #1]
                  |L4.100|
000064  1c68              ADDS     r0,r5,#1              ;152
000066  b285              UXTH     r5,r0                 ;152
                  |L4.104|
000068  2d05              CMP      r5,#5                 ;152
00006a  dbed              BLT      |L4.72|
00006c  1c60              ADDS     r0,r4,#1              ;150
00006e  b284              UXTH     r4,r0                 ;150
                  |L4.112|
000070  2c04              CMP      r4,#4                 ;150
000072  dbe6              BLT      |L4.66|
;;;159    			}
;;;160    		}
;;;161    	}
;;;162    		  
;;;163    	usSum = 0;
000074  2600              MOVS     r6,#0
;;;164    
;;;165    	/*求和 */
;;;166    	for(i = XPT2046_LOST_VAL; i < XPT2046_READ_TIMES - XPT2046_LOST_VAL; i++)
000076  2401              MOVS     r4,#1
000078  e005              B        |L4.134|
                  |L4.122|
;;;167    	{
;;;168    		usSum += buf[i];
00007a  f83d0014          LDRH     r0,[sp,r4,LSL #1]
00007e  4430              ADD      r0,r0,r6
000080  b286              UXTH     r6,r0
000082  1c60              ADDS     r0,r4,#1              ;166
000084  b284              UXTH     r4,r0                 ;166
                  |L4.134|
000086  2c04              CMP      r4,#4                 ;166
000088  dbf7              BLT      |L4.122|
;;;169    	}
;;;170    	/*求平均 */
;;;171    	usTemp = usSum / (XPT2046_READ_TIMES - 2 * XPT2046_LOST_VAL);
00008a  2003              MOVS     r0,#3
00008c  fb96f0f0          SDIV     r0,r6,r0
000090  b287              UXTH     r7,r0
;;;172    
;;;173    	return usTemp; 
000092  4638              MOV      r0,r7
;;;174    } 
000094  e8bd83fe          POP      {r1-r9,pc}
;;;175    
                          ENDP

                  |L4.152|
                          DCD      g_ChipID

                          AREA ||i.TOUCH_InitHard||, CODE, READONLY, ALIGN=2

                  TOUCH_InitHard PROC
;;;76     */
;;;77     void TOUCH_InitHard(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;78     {	
;;;79     	GPIO_InitTypeDef  GPIO_InitStructure;
;;;80     	 
;;;81     	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
000002  2101              MOVS     r1,#1
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;82     	
;;;83     	/* 配置 PC7 为浮空输入模式，用于触笔中断 */
;;;84     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
00000a  2080              MOVS     r0,#0x80
00000c  9000              STR      r0,[sp,#0]
;;;85     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
00000e  2000              MOVS     r0,#0
000010  f88d0004          STRB     r0,[sp,#4]
;;;86     	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;	/* 上下拉电阻不使能 */
000014  f88d0007          STRB     r0,[sp,#7]
;;;87     	GPIO_Init(GPIOC, &GPIO_InitStructure);
000018  4669              MOV      r1,sp
00001a  480d              LDR      r0,|L5.80|
00001c  f7fffffe          BL       GPIO_Init
;;;88     	
;;;89     	
;;;90     	if (g_ChipID == IC_8875)
000020  480c              LDR      r0,|L5.84|
000022  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000024  2875              CMP      r0,#0x75
000026  d106              BNE      |L5.54|
;;;91     	{
;;;92     		RA8875_TouchInit();
000028  f7fffffe          BL       RA8875_TouchInit
;;;93     
;;;94     		g_tTP.usMaxAdc = 1023;	/* 10位ADC */
00002c  f24030ff          MOV      r0,#0x3ff
000030  4909              LDR      r1,|L5.88|
000032  8048              STRH     r0,[r1,#2]
000034  e005              B        |L5.66|
                  |L5.54|
;;;95     	}
;;;96     	else
;;;97     	{
;;;98     		TSC2046_InitHard();
000036  f7fffffe          BL       TSC2046_InitHard
;;;99     
;;;100    		g_tTP.usMaxAdc = 4095;	/* 12位ADC */
00003a  f64070ff          MOV      r0,#0xfff
00003e  4906              LDR      r1,|L5.88|
000040  8048              STRH     r0,[r1,#2]
                  |L5.66|
;;;101    	}
;;;102    
;;;103    	TOUCH_LoadParam();	/* 读取校准参数 */
000042  f7fffffe          BL       TOUCH_LoadParam
;;;104    
;;;105    	g_tTP.Enable = 1;
000046  2001              MOVS     r0,#1
000048  4903              LDR      r1,|L5.88|
00004a  7208              STRB     r0,[r1,#8]
;;;106    }
00004c  bd1c              POP      {r2-r4,pc}
;;;107    
                          ENDP

00004e  0000              DCW      0x0000
                  |L5.80|
                          DCD      0x40020800
                  |L5.84|
                          DCD      g_ChipID
                  |L5.88|
                          DCD      g_tTP

                          AREA ||i.TOUCH_LoadParam||, CODE, READONLY, ALIGN=1

                  TOUCH_LoadParam PROC
;;;471    */
;;;472    void TOUCH_LoadParam(void)
000000  4770              BX       lr
;;;473    {
;;;474    #if 0
;;;475    	/* 保存下面的5个变量即可 */
;;;476    	uint16_t usBuf[5];
;;;477    
;;;478    	/* ReadParamToBuf() */
;;;479    
;;;480    	g_tTP.usAdcX1 = usBuf[0];
;;;481    	g_tTP.usAdcY1 = usBuf[1];
;;;482    
;;;483    	g_tTP.usAdcX2 = usBuf[2];
;;;484    	g_tTP.usAdcY2 = usBuf[3];
;;;485    
;;;486    
;;;487    	g_tTP.XYChange = usBuf[4];
;;;488    #endif
;;;489    }
                          ENDP


                          AREA ||i.TOUCH_ReadAdcXY||, CODE, READONLY, ALIGN=2

                  TOUCH_ReadAdcXY PROC
;;;187    uint8_t ADC_ERR_RANGE = 5; 
;;;188    uint8_t TOUCH_ReadAdcXY(int16_t *_usX, int16_t *_usY) 
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;189    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;190    	uint16_t iX1, iY1;
;;;191     	uint16_t iX2, iY2;
;;;192    	uint16_t iX, iY;
;;;193    
;;;194     	iX1 = TOUCH_DataFilter(ADC_CH_X);
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       TOUCH_DataFilter
00000e  4606              MOV      r6,r0
;;;195    	iY1 = TOUCH_DataFilter(ADC_CH_Y);
000010  2005              MOVS     r0,#5
000012  f7fffffe          BL       TOUCH_DataFilter
000016  4607              MOV      r7,r0
;;;196    	iX2 = TOUCH_DataFilter(ADC_CH_X);
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       TOUCH_DataFilter
00001e  4680              MOV      r8,r0
;;;197    	iY2 = TOUCH_DataFilter(ADC_CH_Y);
000020  2005              MOVS     r0,#5
000022  f7fffffe          BL       TOUCH_DataFilter
000026  4681              MOV      r9,r0
;;;198    	
;;;199    	iX = TOUCH_Abs(iX1 - iX2);
000028  eba60008          SUB      r0,r6,r8
00002c  f7fffffe          BL       TOUCH_Abs
000030  fa1ffa80          UXTH     r10,r0
;;;200    	iY = TOUCH_Abs(iY1 - iY2); 
000034  eba70009          SUB      r0,r7,r9
000038  f7fffffe          BL       TOUCH_Abs
00003c  fa1ffb80          UXTH     r11,r0
;;;201    	
;;;202    	/* 前后两次采样在+-ERR_RANGE内 */  
;;;203        if ((iX <= ADC_ERR_RANGE) && (iY <= ADC_ERR_RANGE))
000040  4816              LDR      r0,|L7.156|
000042  7800              LDRB     r0,[r0,#0]  ; ADC_ERR_RANGE
000044  4582              CMP      r10,r0
000046  dc27              BGT      |L7.152|
000048  4814              LDR      r0,|L7.156|
00004a  7800              LDRB     r0,[r0,#0]  ; ADC_ERR_RANGE
00004c  4583              CMP      r11,r0
00004e  dc23              BGT      |L7.152|
;;;204        {       
;;;205    		
;;;206    		if(g_ucGPIX == 1)
000050  4813              LDR      r0,|L7.160|
000052  7800              LDRB     r0,[r0,#0]  ; g_ucGPIX
000054  2801              CMP      r0,#1
000056  d10e              BNE      |L7.118|
;;;207    		{
;;;208    			*_usY = (iX1 + iX2) / 2;
000058  eb060008          ADD      r0,r6,r8
00005c  eb0071d0          ADD      r1,r0,r0,LSR #31
000060  1049              ASRS     r1,r1,#1
000062  b209              SXTH     r1,r1
000064  8029              STRH     r1,[r5,#0]
;;;209    	        *_usX = (iY1 + iY2) / 2;		
000066  eb070009          ADD      r0,r7,r9
00006a  eb0071d0          ADD      r1,r0,r0,LSR #31
00006e  1049              ASRS     r1,r1,#1
000070  b209              SXTH     r1,r1
000072  8021              STRH     r1,[r4,#0]
000074  e00d              B        |L7.146|
                  |L7.118|
;;;210    		}
;;;211    		else
;;;212    		{
;;;213    			*_usX = (iX1 + iX2) / 2;
000076  eb060008          ADD      r0,r6,r8
00007a  eb0071d0          ADD      r1,r0,r0,LSR #31
00007e  1049              ASRS     r1,r1,#1
000080  b209              SXTH     r1,r1
000082  8021              STRH     r1,[r4,#0]
;;;214    	        *_usY = (iY1 + iY2) / 2;	
000084  eb070009          ADD      r0,r7,r9
000088  eb0071d0          ADD      r1,r0,r0,LSR #31
00008c  1049              ASRS     r1,r1,#1
00008e  b209              SXTH     r1,r1
000090  8029              STRH     r1,[r5,#0]
                  |L7.146|
;;;215    		}
;;;216    	
;;;217            return 1;
000092  2001              MOVS     r0,#1
                  |L7.148|
;;;218        }
;;;219    	else 
;;;220    	{
;;;221    		return 0;
;;;222    	}	  
;;;223    } 
000094  e8bd9ff0          POP      {r4-r12,pc}
                  |L7.152|
000098  2000              MOVS     r0,#0                 ;221
00009a  e7fb              B        |L7.148|
;;;224    
                          ENDP

                  |L7.156|
                          DCD      ADC_ERR_RANGE
                  |L7.160|
                          DCD      g_ucGPIX

                          AREA ||i.TOUCH_SCAN||, CODE, READONLY, ALIGN=2

                  TOUCH_SCAN PROC
;;;232    */
;;;233    void TOUCH_SCAN(void)
000000  b510              PUSH     {r4,lr}
;;;234    {
;;;235    	uint8_t s_invalid_count = 0;
000002  2400              MOVS     r4,#0
;;;236    	
;;;237    // 	if(TOUCH_PressValid == 0)
;;;238    // 	{			
;;;239    		while(!TOUCH_ReadAdcXY(&g_tTP.usAdcNowX, &g_tTP.usAdcNowY)&&s_invalid_count < 20);
000004  bf00              NOP      
                  |L8.6|
000006  4909              LDR      r1,|L8.44|
000008  1e88              SUBS     r0,r1,#2
00000a  f7fffffe          BL       TOUCH_ReadAdcXY
00000e  b908              CBNZ     r0,|L8.20|
000010  2c14              CMP      r4,#0x14
000012  dbf8              BLT      |L8.6|
                  |L8.20|
;;;240    		{
;;;241    			s_invalid_count++;
000014  1c60              ADDS     r0,r4,#1
000016  b2c4              UXTB     r4,r0
;;;242    		}
;;;243    		if(s_invalid_count >= 20)
000018  2c14              CMP      r4,#0x14
00001a  db05              BLT      |L8.40|
;;;244    		{
;;;245    			g_tTP.usAdcNowX = -1;
00001c  f04f30ff          MOV      r0,#0xffffffff
000020  4902              LDR      r1,|L8.44|
000022  1f89              SUBS     r1,r1,#6
000024  8088              STRH     r0,[r1,#4]
;;;246    			g_tTP.usAdcNowY = -1;	
000026  80c8              STRH     r0,[r1,#6]
                  |L8.40|
;;;247    		}
;;;248    // 	}
;;;249    // 	else
;;;250    // 	{
;;;251    // 		g_tTP.usAdcNowX = -1;
;;;252    // 		g_tTP.usAdcNowY = -1;	
;;;253    // 	}
;;;254    			
;;;255    }
000028  bd10              POP      {r4,pc}
;;;256    
                          ENDP

00002a  0000              DCW      0x0000
                  |L8.44|
                          DCD      g_tTP+0x6

                          AREA ||i.TOUCH_SaveParam||, CODE, READONLY, ALIGN=1

                  TOUCH_SaveParam PROC
;;;446    */
;;;447    void TOUCH_SaveParam(void)
000000  4770              BX       lr
;;;448    {
;;;449    #if 0
;;;450    	/* 保存下面的4个变量即可 */
;;;451    	uint16_t usBuf[5];
;;;452    
;;;453    	usBuf[0] = g_tTP.usAdcX1;
;;;454    	usBuf[1] = g_tTP.usAdcY1;
;;;455    
;;;456    	usBuf[2] = g_tTP.usAdcX2;
;;;457    	usBuf[3] = g_tTP.usAdcY2;
;;;458    
;;;459    	usBuf[4] = g_tTP.XYChange;
;;;460    
;;;461    #endif
;;;462    }
;;;463    
                          ENDP


                          AREA ||i.TSC2046_InitHard||, CODE, READONLY, ALIGN=2

                  TSC2046_InitHard PROC
;;;264    */
;;;265    static void TSC2046_InitHard(void)
000000  b500              PUSH     {lr}
;;;266    {
000002  b087              SUB      sp,sp,#0x1c
;;;267    /*
;;;268    【1】安富莱STM32-X2, X4 开发板 + 3.0寸显示模块， 显示模块上的触摸芯片为 TSC2046或其兼容芯片
;;;269    	PA8   --> TP_CS
;;;270    	PD3   --> TP_BUSY
;;;271    	PA5   --> TP_SCK
;;;272    	PA6   --> TP_MISO
;;;273    	PA7   --> TP_MOSI
;;;274    	PC7   --> TP_PEN_INT
;;;275    */
;;;276    
;;;277    	GPIO_InitTypeDef  GPIO_InitStructure;
;;;278    	SPI_InitTypeDef   SPI_InitStructure;
;;;279    
;;;280    	/* 开启GPIO时钟 */
;;;281    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOD, ENABLE);
000004  2101              MOVS     r1,#1
000006  200b              MOVS     r0,#0xb
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;282    
;;;283    	/* 开启 SPI3 外设时钟 */
;;;284    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0308              LSLS     r0,r1,#12
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;285    
;;;286    	/* 配置 PB3、PB4、PB5 为复用推挽输出，用于 SCK, MISO and MOSI */
;;;287    	GPIO_PinAFConfig(GPIOB, GPIO_PinSource3, GPIO_AF_SPI1);
000014  2205              MOVS     r2,#5
000016  2103              MOVS     r1,#3
000018  482f              LDR      r0,|L10.216|
00001a  f7fffffe          BL       GPIO_PinAFConfig
;;;288    	GPIO_PinAFConfig(GPIOB, GPIO_PinSource4, GPIO_AF_SPI1);
00001e  2205              MOVS     r2,#5
000020  2104              MOVS     r1,#4
000022  482d              LDR      r0,|L10.216|
000024  f7fffffe          BL       GPIO_PinAFConfig
;;;289    	GPIO_PinAFConfig(GPIOB, GPIO_PinSource5, GPIO_AF_SPI1);	
000028  2205              MOVS     r2,#5
00002a  4611              MOV      r1,r2
00002c  482a              LDR      r0,|L10.216|
00002e  f7fffffe          BL       GPIO_PinAFConfig
;;;290    	
;;;291    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5;
000032  2038              MOVS     r0,#0x38
000034  9005              STR      r0,[sp,#0x14]
;;;292    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000036  2002              MOVS     r0,#2
000038  f88d0018          STRB     r0,[sp,#0x18]
;;;293    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
00003c  2003              MOVS     r0,#3
00003e  f88d0019          STRB     r0,[sp,#0x19]
;;;294    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000042  2000              MOVS     r0,#0
000044  f88d001a          STRB     r0,[sp,#0x1a]
;;;295    	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
000048  f88d001b          STRB     r0,[sp,#0x1b]
;;;296    	GPIO_Init(GPIOB,&GPIO_InitStructure);
00004c  a905              ADD      r1,sp,#0x14
00004e  4822              LDR      r0,|L10.216|
000050  f7fffffe          BL       GPIO_Init
;;;297    
;;;298    	/* 配置 PA8 脚为推挽输出，用于 TP_CS  */
;;;299    	TSC2046_CS_1();
000054  f44f7080          MOV      r0,#0x100
000058  4920              LDR      r1,|L10.220|
00005a  8308              STRH     r0,[r1,#0x18]
;;;300    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
00005c  9005              STR      r0,[sp,#0x14]
;;;301    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
00005e  2001              MOVS     r0,#1
000060  f88d0018          STRB     r0,[sp,#0x18]
;;;302    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
000064  2003              MOVS     r0,#3
000066  f88d0019          STRB     r0,[sp,#0x19]
;;;303    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00006a  2000              MOVS     r0,#0
00006c  f88d001a          STRB     r0,[sp,#0x1a]
;;;304    	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
000070  f88d001b          STRB     r0,[sp,#0x1b]
;;;305    	GPIO_Init(GPIOA,&GPIO_InitStructure);
000074  a905              ADD      r1,sp,#0x14
000076  4819              LDR      r0,|L10.220|
000078  f7fffffe          BL       GPIO_Init
;;;306    
;;;307    	/* 配置 PD3 引脚为上拉输入，用于 TP_BUSY */
;;;308    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
00007c  2008              MOVS     r0,#8
00007e  9005              STR      r0,[sp,#0x14]
;;;309    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
000080  2000              MOVS     r0,#0
000082  f88d0018          STRB     r0,[sp,#0x18]
;;;310    	GPIO_Init(GPIOD, &GPIO_InitStructure);
000086  a905              ADD      r1,sp,#0x14
000088  4815              LDR      r0,|L10.224|
00008a  f7fffffe          BL       GPIO_Init
;;;311    
;;;312    
;;;313    	/* 配置 SPI1工作模式 */
;;;314    	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
00008e  2000              MOVS     r0,#0
000090  f8ad0000          STRH     r0,[sp,#0]
;;;315    	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
000094  f44f7082          MOV      r0,#0x104
000098  f8ad0002          STRH     r0,[sp,#2]
;;;316    	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
00009c  2000              MOVS     r0,#0
00009e  f8ad0004          STRH     r0,[sp,#4]
;;;317    	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
0000a2  f8ad0006          STRH     r0,[sp,#6]
;;;318    	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
0000a6  f8ad0008          STRH     r0,[sp,#8]
;;;319    	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft; 		/* 软件控制片选 */
0000aa  f44f7000          MOV      r0,#0x200
0000ae  f8ad000a          STRH     r0,[sp,#0xa]
;;;320    	/*
;;;321    		SPI_BaudRatePrescaler_64 对应SCK时钟频率约1M
;;;322    		TSC2046 对SCK时钟的要求，高电平和低电平最小200ns，周期400ns，也就是2.5M
;;;323    
;;;324    		示波器实测频率
;;;325    		SPI_BaudRatePrescaler_64 时，SCK时钟频率约 1.116M
;;;326    		SPI_BaudRatePrescaler_32 时，SCK时钟频率月 2.232M
;;;327    	*/
;;;328    	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;
0000b2  2038              MOVS     r0,#0x38
0000b4  f8ad000c          STRH     r0,[sp,#0xc]
;;;329    	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
0000b8  2000              MOVS     r0,#0
0000ba  f8ad000e          STRH     r0,[sp,#0xe]
;;;330    	SPI_InitStructure.SPI_CRCPolynomial = 7;
0000be  2007              MOVS     r0,#7
0000c0  f8ad0010          STRH     r0,[sp,#0x10]
;;;331    	SPI_Init(SPI1,&SPI_InitStructure);
0000c4  4669              MOV      r1,sp
0000c6  4807              LDR      r0,|L10.228|
0000c8  f7fffffe          BL       SPI_Init
;;;332    
;;;333    	/* 使能 SPI1 */
;;;334    	SPI_Cmd(SPI1,ENABLE);
0000cc  2101              MOVS     r1,#1
0000ce  4805              LDR      r0,|L10.228|
0000d0  f7fffffe          BL       SPI_Cmd
;;;335    }
0000d4  b007              ADD      sp,sp,#0x1c
0000d6  bd00              POP      {pc}
;;;336    
                          ENDP

                  |L10.216|
                          DCD      0x40020400
                  |L10.220|
                          DCD      0x40020000
                  |L10.224|
                          DCD      0x40020c00
                  |L10.228|
                          DCD      0x40013000

                          AREA ||i.TSC2046_ReadAdc||, CODE, READONLY, ALIGN=2

                  TSC2046_ReadAdc PROC
;;;387    */
;;;388    uint16_t TSC2046_ReadAdc(uint8_t _ucCh)
000000  b570              PUSH     {r4-r6,lr}
;;;389    {
000002  4605              MOV      r5,r0
;;;390    	uint16_t usAdc;
;;;391    
;;;392    	TSC2046_CS_0();		/* 使能TS2046的片选 */
000004  f44f7080          MOV      r0,#0x100
000008  490d              LDR      r1,|L11.64|
00000a  8348              STRH     r0,[r1,#0x1a]
;;;393    
;;;394    	/*
;;;395    		TSC2046 控制字（8Bit）
;;;396    		Bit7   = S     起始位，必须是1
;;;397    		Bit6:4 = A2-A0 模拟输入通道选择A2-A0; 共有6个通道。
;;;398    		Bit3   = MODE  ADC位数选择，0 表示12Bit;1表示8Bit
;;;399    		Bit2   = SER/DFR 模拟输入形式，  1表示单端输入；0表示差分输入
;;;400    		Bit1:0 = PD1-PD0 掉电模式选择位
;;;401    	*/
;;;402    	SPI_ShiftByte((1 << 7) | (_ucCh << 4));			/* 选择通道1, 测量X位置 */
00000c  2180              MOVS     r1,#0x80
00000e  ea411105          ORR      r1,r1,r5,LSL #4
000012  b2c8              UXTB     r0,r1
000014  f7fffffe          BL       SPI_ShiftByte
;;;403    
;;;404    	/* 读ADC结果, 12位ADC值的高位先传，前12bit有效，最后4bit填0 */
;;;405    	usAdc = SPI_ShiftByte(0x00);		/* 发送的0x00可以为任意值，无意义 */
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       SPI_ShiftByte
00001e  4604              MOV      r4,r0
;;;406    	usAdc <<= 8;
000020  f64f70ff          MOV      r0,#0xffff
000024  ea002404          AND      r4,r0,r4,LSL #8
;;;407    	usAdc += SPI_ShiftByte(0x00);		/* 获得12位的ADC采样值 */
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       SPI_ShiftByte
00002e  4420              ADD      r0,r0,r4
000030  b284              UXTH     r4,r0
;;;408    
;;;409    	usAdc >>= 3;						/* 右移3位，保留12位有效数字 */
000032  10e4              ASRS     r4,r4,#3
;;;410    
;;;411    	TSC2046_CS_1();					/* 禁能片选 */
000034  f44f7080          MOV      r0,#0x100
000038  4901              LDR      r1,|L11.64|
00003a  8308              STRH     r0,[r1,#0x18]
;;;412    
;;;413    	return (usAdc);
00003c  4620              MOV      r0,r4
;;;414    }
00003e  bd70              POP      {r4-r6,pc}
;;;415    
                          ENDP

                  |L11.64|
                          DCD      0x40020000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  g_tTP
                          %        10

                          AREA ||.data||, DATA, ALIGN=0

                  ADC_ERR_RANGE
000000  05                DCB      0x05

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_touch.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_bsp_touch_c_30847bcd____REV16|
#line 129 "D:\\Keil_v4\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_bsp_touch_c_30847bcd____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___11_bsp_touch_c_30847bcd____REVSH|
#line 144
|__asm___11_bsp_touch_c_30847bcd____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
