; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\lcdconf.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=..\output\lcdconf.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\User\fatfs\src -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM4F -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F4XX -DARM_MATH_CM4 -D__CC_ARM ..\..\emWin\Config\LCDConf.c]
                          THUMB

                          AREA ||i.LCD_X_Config||, CODE, READONLY, ALIGN=2

                  LCD_X_Config PROC
;;;105    */
;;;106    void LCD_X_Config(void) 
000000  b508              PUSH     {r3,lr}
;;;107    {		
;;;108    // 	/* Set display driver and color conversion for 1st layer */
;;;109        GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER, COLOR_CONVERSION, 0, 0);
000002  2300              MOVS     r3,#0
000004  461a              MOV      r2,r3
000006  493a              LDR      r1,|L1.240|
000008  483a              LDR      r0,|L1.244|
00000a  f7fffffe          BL       GUI_DEVICE_CreateAndLink
;;;110    
;;;111         if (g_ChipID == IC_8875)
00000e  483a              LDR      r0,|L1.248|
000010  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000012  2875              CMP      r0,#0x75
000014  d149              BNE      |L1.170|
;;;112     	{
;;;113     		if (g_ucGPIX == 1)	/* 	GPIX = 1  4.3  480x272 */
000016  4839              LDR      r0,|L1.252|
000018  7800              LDRB     r0,[r0,#0]  ; g_ucGPIX
00001a  2801              CMP      r0,#1
00001c  d122              BNE      |L1.100|
;;;114     		{
;;;115    			/* Display driver configuration */
;;;116    			LCD_SetSizeEx    (0, 480, 272);
00001e  f44f7288          MOV      r2,#0x110
000022  f44f71f0          MOV      r1,#0x1e0
000026  2000              MOVS     r0,#0
000028  f7fffffe          BL       LCD_SetSizeEx
;;;117    			LCD_SetVSizeEx   (0, 480, 272);
00002c  f44f7288          MOV      r2,#0x110
000030  f44f71f0          MOV      r1,#0x1e0
000034  2000              MOVS     r0,#0
000036  f7fffffe          BL       LCD_SetVSizeEx
;;;118    
;;;119    			/* Touch calibration */ 
;;;120    			/* Touch calibration */ 
;;;121    			GUI_TOUCH_Calibrate(GUI_COORD_X, 15, 480-15, 627,  51);
00003a  2033              MOVS     r0,#0x33
00003c  f2402373          MOV      r3,#0x273
000040  f24012d1          MOV      r2,#0x1d1
000044  210f              MOVS     r1,#0xf
000046  9000              STR      r0,[sp,#0]
000048  2000              MOVS     r0,#0
00004a  f7fffffe          BL       GUI_TOUCH_Calibrate
;;;122    			GUI_TOUCH_Calibrate(GUI_COORD_Y, 15, 272-15, 893,  122);
00004e  207a              MOVS     r0,#0x7a
000050  f240337d          MOV      r3,#0x37d
000054  f2401201          MOV      r2,#0x101
000058  210f              MOVS     r1,#0xf
00005a  9000              STR      r0,[sp,#0]
00005c  2001              MOVS     r0,#1
00005e  f7fffffe          BL       GUI_TOUCH_Calibrate
000062  e043              B        |L1.236|
                  |L1.100|
;;;123     		}
;;;124     		else 	/* 	GPIX = 0  7  800*480 */
;;;125     		{
;;;126     			/* Display driver configuration */
;;;127     			LCD_SetSizeEx    (0, XSIZE_PHYS, YSIZE_PHYS);
000064  f44f72f0          MOV      r2,#0x1e0
000068  f44f7148          MOV      r1,#0x320
00006c  2000              MOVS     r0,#0
00006e  f7fffffe          BL       LCD_SetSizeEx
;;;128     			LCD_SetVSizeEx   (0, VXSIZE_PHYS, VYSIZE_PHYS);
000072  f44f72f0          MOV      r2,#0x1e0
000076  f44f7148          MOV      r1,#0x320
00007a  2000              MOVS     r0,#0
00007c  f7fffffe          BL       LCD_SetVSizeEx
;;;129     		//	LCD_SetVRAMAddrEx(0, (void *)VRAM_ADDR);
;;;130     			
;;;131     			/* Touch calibration */
;;;132     		//	GUI_TOUCH_SetOrientation(0);  
;;;133     			GUI_TOUCH_Calibrate(GUI_COORD_X, 0, XSIZE_PHYS - 1, GUI_TOUCH_AD_LEFT,  GUI_TOUCH_AD_RIGHT);
000080  f44f7075          MOV      r0,#0x3d4
000084  2323              MOVS     r3,#0x23
000086  f240321f          MOV      r2,#0x31f
00008a  2100              MOVS     r1,#0
00008c  9000              STR      r0,[sp,#0]
00008e  4608              MOV      r0,r1
000090  f7fffffe          BL       GUI_TOUCH_Calibrate
;;;134     			GUI_TOUCH_Calibrate(GUI_COORD_Y, 0, YSIZE_PHYS - 1, GUI_TOUCH_AD_TOP,  GUI_TOUCH_AD_BOTTOM);		
000094  205a              MOVS     r0,#0x5a
000096  f2403393          MOV      r3,#0x393
00009a  f24012df          MOV      r2,#0x1df
00009e  2100              MOVS     r1,#0
0000a0  9000              STR      r0,[sp,#0]
0000a2  2001              MOVS     r0,#1
0000a4  f7fffffe          BL       GUI_TOUCH_Calibrate
0000a8  e020              B        |L1.236|
                  |L1.170|
;;;135     		}
;;;136     	}
;;;137     	else
;;;138     	{
;;;139     		LCD_SetSizeEx    (0, 400, 240);
0000aa  22f0              MOVS     r2,#0xf0
0000ac  f44f71c8          MOV      r1,#0x190
0000b0  2000              MOVS     r0,#0
0000b2  f7fffffe          BL       LCD_SetSizeEx
;;;140     		LCD_SetVSizeEx   (0, 400, 240);
0000b6  22f0              MOVS     r2,#0xf0
0000b8  f44f71c8          MOV      r1,#0x190
0000bc  2000              MOVS     r0,#0
0000be  f7fffffe          BL       LCD_SetVSizeEx
;;;141     		
;;;142     		/* Touch calibration */ 
;;;143     		GUI_TOUCH_Calibrate(GUI_COORD_X, 0, 399, 300, 3600);
0000c2  f44f6061          MOV      r0,#0xe10
0000c6  f44f7396          MOV      r3,#0x12c
0000ca  f240128f          MOV      r2,#0x18f
0000ce  2100              MOVS     r1,#0
0000d0  9000              STR      r0,[sp,#0]
0000d2  4608              MOV      r0,r1
0000d4  f7fffffe          BL       GUI_TOUCH_Calibrate
;;;144     		GUI_TOUCH_Calibrate(GUI_COORD_Y, 0, 239, 273,  3671);	
0000d8  f6406057          MOV      r0,#0xe57
0000dc  f2401311          MOV      r3,#0x111
0000e0  22ef              MOVS     r2,#0xef
0000e2  2100              MOVS     r1,#0
0000e4  9000              STR      r0,[sp,#0]
0000e6  2001              MOVS     r0,#1
0000e8  f7fffffe          BL       GUI_TOUCH_Calibrate
                  |L1.236|
;;;145     	}
;;;146    
;;;147    }
0000ec  bd08              POP      {r3,pc}
;;;148    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L1.240|
                          DCD      LCD_API_ColorConv_M565
                  |L1.244|
                          DCD      GUIDRV_Template_API
                  |L1.248|
                          DCD      g_ChipID
                  |L1.252|
                          DCD      g_ucGPIX

                          AREA ||i.LCD_X_DisplayDriver||, CODE, READONLY, ALIGN=1

                  LCD_X_DisplayDriver PROC
;;;171    */
;;;172    int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) 
000000  b530              PUSH     {r4,r5,lr}
;;;173    {
000002  4605              MOV      r5,r0
;;;174    	int r;
;;;175    	switch (Cmd) 
000004  2904              CMP      r1,#4
000006  d019              BEQ      |L2.60|
000008  dc06              BGT      |L2.24|
00000a  2901              CMP      r1,#1
00000c  d00b              BEQ      |L2.38|
00000e  2902              CMP      r1,#2
000010  d00b              BEQ      |L2.42|
000012  2903              CMP      r1,#3
000014  d119              BNE      |L2.74|
000016  e00b              B        |L2.48|
                  |L2.24|
000018  2905              CMP      r1,#5
00001a  d012              BEQ      |L2.66|
00001c  2906              CMP      r1,#6
00001e  d012              BEQ      |L2.70|
000020  290e              CMP      r1,#0xe
000022  d112              BNE      |L2.74|
000024  e007              B        |L2.54|
                  |L2.38|
;;;176    	{
;;;177    		case LCD_X_INITCONTROLLER: 
;;;178    		{
;;;179    			//
;;;180    			// Called during the initialization process in order to set up the
;;;181    			// display controller and put it into operation. If the display
;;;182    			// controller is not initialized by any external routine this needs
;;;183    			// to be adapted by the customer...
;;;184    			//
;;;185    			// ...
;;;186    			//  已经在前面初始化了，这里不再初始化
;;;187    			
;;;188    			return 0;
000026  2000              MOVS     r0,#0
                  |L2.40|
;;;189    		}
;;;190    		case LCD_X_SETVRAMADDR: 
;;;191    		{
;;;192    			//
;;;193    			// Required for setting the address of the video RAM for drivers
;;;194    			// with memory mapped video RAM which is passed in the 'pVRAM' element of p
;;;195    			//
;;;196    			LCD_X_SETVRAMADDR_INFO * p;
;;;197    			(void)p;
;;;198    			p = (LCD_X_SETVRAMADDR_INFO *)pData;
;;;199    			//...
;;;200    			return 0;
;;;201    		}
;;;202    		case LCD_X_SETORG: 
;;;203    		{
;;;204    			//
;;;205    			// Required for setting the display origin which is passed in the 'xPos' and 'yPos' element of p
;;;206    			//
;;;207    			LCD_X_SETORG_INFO * p;
;;;208    			(void)p;
;;;209    			p = (LCD_X_SETORG_INFO *)pData;
;;;210    
;;;211    			//...
;;;212    			return 0;
;;;213    		}
;;;214    		case LCD_X_SHOWBUFFER: 
;;;215    		{
;;;216    			//
;;;217    			// Required if multiple buffers are used. The 'Index' element of p contains the buffer index.
;;;218    			//
;;;219    			LCD_X_SHOWBUFFER_INFO * p;
;;;220    			(void)p;
;;;221    			p = (LCD_X_SHOWBUFFER_INFO *)pData;
;;;222    			//...
;;;223    			return 0;
;;;224    		}
;;;225    		case LCD_X_SETLUTENTRY: 
;;;226    		{
;;;227    			//
;;;228    			// Required for setting a lookup table entry which is passed in the 'Pos' and 'Color' element of p
;;;229    			//
;;;230    			LCD_X_SETLUTENTRY_INFO * p;
;;;231    			(void)p;
;;;232    			p = (LCD_X_SETLUTENTRY_INFO *)pData;
;;;233    			//...
;;;234    			return 0;
;;;235    		}
;;;236    		case LCD_X_ON: 
;;;237    		{
;;;238    			//
;;;239    			// Required if the display controller should support switching on and off
;;;240    			//
;;;241    			return 0;
;;;242    		}
;;;243    		case LCD_X_OFF: 
;;;244    		{
;;;245    			//
;;;246    			// Required if the display controller should support switching on and off
;;;247    			//
;;;248    			// ...
;;;249    			return 0;
;;;250    		}
;;;251    		default:
;;;252    		r = -1;
;;;253    	}
;;;254    	return r;
;;;255    }
000028  bd30              POP      {r4,r5,pc}
                  |L2.42|
00002a  4614              MOV      r4,r2                 ;198
00002c  2000              MOVS     r0,#0                 ;200
00002e  e7fb              B        |L2.40|
                  |L2.48|
000030  4614              MOV      r4,r2                 ;209
000032  2000              MOVS     r0,#0                 ;212
000034  e7f8              B        |L2.40|
                  |L2.54|
000036  4614              MOV      r4,r2                 ;221
000038  2000              MOVS     r0,#0                 ;223
00003a  e7f5              B        |L2.40|
                  |L2.60|
00003c  4614              MOV      r4,r2                 ;232
00003e  2000              MOVS     r0,#0                 ;234
000040  e7f2              B        |L2.40|
                  |L2.66|
000042  2000              MOVS     r0,#0                 ;241
000044  e7f0              B        |L2.40|
                  |L2.70|
000046  2000              MOVS     r0,#0                 ;249
000048  e7ee              B        |L2.40|
                  |L2.74|
00004a  f04f33ff          MOV      r3,#0xffffffff        ;252
00004e  bf00              NOP                            ;175
000050  bf00              NOP                            ;175
000052  4618              MOV      r0,r3                 ;254
000054  e7e8              B        |L2.40|
;;;256    /*************************** End of file ****************************/
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\emWin\\Config\\LCDConf.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_LCDConf_c_0a169049____REV16|
#line 129 "D:\\Keil_v4\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_LCDConf_c_0a169049____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_LCDConf_c_0a169049____REVSH|
#line 144
|__asm___9_LCDConf_c_0a169049____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
