; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\lcd_spfd5420.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=..\output\lcd_spfd5420.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\User\fatfs\src -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM4F -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -ID:\Keil_v4\ARM\RV31\INC -ID:\Keil_v4\ARM\CMSIS\Include -ID:\Keil_v4\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F4XX -DARM_MATH_CM4 -D__CC_ARM ..\..\User\bsp_stm32f4xx\src\LCD_SPFD5420.c]
                          THUMB

                          AREA ||i.Init_5420_4001||, CODE, READONLY, ALIGN=1

                  Init_5420_4001 PROC
;;;257    */
;;;258    static void Init_5420_4001(void)
000000  b510              PUSH     {r4,lr}
;;;259    {
;;;260    	/* 初始化LCD，写LCD寄存器进行配置 */
;;;261    	SPFD5420_WriteReg(0x0000, 0x0000);
000002  2100              MOVS     r1,#0
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       SPFD5420_WriteReg
;;;262    	SPFD5420_WriteReg(0x0001, 0x0100);
00000a  f44f7180          MOV      r1,#0x100
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       SPFD5420_WriteReg
;;;263    	SPFD5420_WriteReg(0x0002, 0x0100);
000014  f44f7180          MOV      r1,#0x100
000018  2002              MOVS     r0,#2
00001a  f7fffffe          BL       SPFD5420_WriteReg
;;;264    
;;;265    	/*
;;;266    		R003H 寄存器很关键， Entry Mode ，决定了扫描方向
;;;267    		参见：SPFD5420A.pdf 第15页
;;;268    
;;;269    		240x400屏幕物理坐标(px,py)如下:
;;;270    		    R003 = 0x1018                  R003 = 0x1008
;;;271    		  -------------------          -------------------
;;;272    		 |(0,0)              |        |(0,0)              |
;;;273    		 |                   |        |					  |
;;;274    		 |  ^           ^    |        |   ^           ^   |
;;;275    		 |  |           |    |        |   |           |   |
;;;276    		 |  |           |    |        |   |           |   |
;;;277    		 |  |           |    |        |   |           |   |
;;;278    		 |  |  ------>  |    |        |   | <------   |   |
;;;279    		 |  |           |    |        |   |           |   |
;;;280    		 |  |           |    |        |   |           |   |
;;;281    		 |  |           |    |        |   |           |   |
;;;282    		 |  |           |    |        |   |           |   |
;;;283    		 |                   |        |					  |
;;;284    		 |                   |        |                   |
;;;285    		 |      (x=239,y=399)|        |      (x=239,y=399)|
;;;286    		 |-------------------|        |-------------------|
;;;287    		 |                   |        |                   |
;;;288    		  -------------------          -------------------
;;;289    
;;;290    		按照安富莱开发板LCD的方向，我们期望的虚拟坐标和扫描方向如下：(和上图第1个吻合)
;;;291    		 --------------------------------
;;;292    		|  |(0,0)                        |
;;;293    		|  |     --------->              |
;;;294    		|  |         |                   |
;;;295    		|  |         |                   |
;;;296    		|  |         |                   |
;;;297    		|  |         V                   |
;;;298    		|  |     --------->              |
;;;299    		|  |                    (399,239)|
;;;300    		 --------------------------------
;;;301    
;;;302    		虚拟坐标(x,y) 和物理坐标的转换关系
;;;303    		x = 399 - py;
;;;304    		y = px;
;;;305    
;;;306    		py = 399 - x;
;;;307    		px = y;
;;;308    
;;;309    	*/
;;;310    	SPFD5420_WriteReg(0x0003, 0x1018); /* 0x1018 1030 */
00001e  f2410118          MOV      r1,#0x1018
000022  2003              MOVS     r0,#3
000024  f7fffffe          BL       SPFD5420_WriteReg
;;;311    
;;;312    	SPFD5420_WriteReg(0x0008, 0x0808);
000028  f6400108          MOV      r1,#0x808
00002c  2008              MOVS     r0,#8
00002e  f7fffffe          BL       SPFD5420_WriteReg
;;;313    	SPFD5420_WriteReg(0x0009, 0x0001);
000032  2101              MOVS     r1,#1
000034  2009              MOVS     r0,#9
000036  f7fffffe          BL       SPFD5420_WriteReg
;;;314    	SPFD5420_WriteReg(0x000B, 0x0010);
00003a  2110              MOVS     r1,#0x10
00003c  200b              MOVS     r0,#0xb
00003e  f7fffffe          BL       SPFD5420_WriteReg
;;;315    	SPFD5420_WriteReg(0x000C, 0x0000);
000042  2100              MOVS     r1,#0
000044  200c              MOVS     r0,#0xc
000046  f7fffffe          BL       SPFD5420_WriteReg
;;;316    	SPFD5420_WriteReg(0x000F, 0x0000);
00004a  2100              MOVS     r1,#0
00004c  200f              MOVS     r0,#0xf
00004e  f7fffffe          BL       SPFD5420_WriteReg
;;;317    	SPFD5420_WriteReg(0x0007, 0x0001);
000052  2101              MOVS     r1,#1
000054  2007              MOVS     r0,#7
000056  f7fffffe          BL       SPFD5420_WriteReg
;;;318    	SPFD5420_WriteReg(0x0010, 0x0013);
00005a  2113              MOVS     r1,#0x13
00005c  2010              MOVS     r0,#0x10
00005e  f7fffffe          BL       SPFD5420_WriteReg
;;;319    	SPFD5420_WriteReg(0x0011, 0x0501);
000062  f2405101          MOV      r1,#0x501
000066  2011              MOVS     r0,#0x11
000068  f7fffffe          BL       SPFD5420_WriteReg
;;;320    	SPFD5420_WriteReg(0x0012, 0x0300);
00006c  f44f7140          MOV      r1,#0x300
000070  2012              MOVS     r0,#0x12
000072  f7fffffe          BL       SPFD5420_WriteReg
;;;321    	SPFD5420_WriteReg(0x0020, 0x021E);
000076  f240211e          MOV      r1,#0x21e
00007a  2020              MOVS     r0,#0x20
00007c  f7fffffe          BL       SPFD5420_WriteReg
;;;322    	SPFD5420_WriteReg(0x0021, 0x0202);
000080  f2402102          MOV      r1,#0x202
000084  2021              MOVS     r0,#0x21
000086  f7fffffe          BL       SPFD5420_WriteReg
;;;323    	SPFD5420_WriteReg(0x0090, 0x8000);
00008a  f44f4100          MOV      r1,#0x8000
00008e  2090              MOVS     r0,#0x90
000090  f7fffffe          BL       SPFD5420_WriteReg
;;;324    	SPFD5420_WriteReg(0x0100, 0x17B0);
000094  f24171b0          MOV      r1,#0x17b0
000098  f44f7080          MOV      r0,#0x100
00009c  f7fffffe          BL       SPFD5420_WriteReg
;;;325    	SPFD5420_WriteReg(0x0101, 0x0147);
0000a0  f2401147          MOV      r1,#0x147
0000a4  f2401001          MOV      r0,#0x101
0000a8  f7fffffe          BL       SPFD5420_WriteReg
;;;326    	SPFD5420_WriteReg(0x0102, 0x0135);
0000ac  f2401135          MOV      r1,#0x135
0000b0  f44f7081          MOV      r0,#0x102
0000b4  f7fffffe          BL       SPFD5420_WriteReg
;;;327    	SPFD5420_WriteReg(0x0103, 0x0700);
0000b8  f44f61e0          MOV      r1,#0x700
0000bc  f2401003          MOV      r0,#0x103
0000c0  f7fffffe          BL       SPFD5420_WriteReg
;;;328    	SPFD5420_WriteReg(0x0107, 0x0000);
0000c4  2100              MOVS     r1,#0
0000c6  f2401007          MOV      r0,#0x107
0000ca  f7fffffe          BL       SPFD5420_WriteReg
;;;329    	SPFD5420_WriteReg(0x0110, 0x0001);
0000ce  2101              MOVS     r1,#1
0000d0  f44f7088          MOV      r0,#0x110
0000d4  f7fffffe          BL       SPFD5420_WriteReg
;;;330    	SPFD5420_WriteReg(0x0210, 0x0000);
0000d8  2100              MOVS     r1,#0
0000da  f44f7004          MOV      r0,#0x210
0000de  f7fffffe          BL       SPFD5420_WriteReg
;;;331    	SPFD5420_WriteReg(0x0211, 0x00EF);
0000e2  21ef              MOVS     r1,#0xef
0000e4  f2402011          MOV      r0,#0x211
0000e8  f7fffffe          BL       SPFD5420_WriteReg
;;;332    	SPFD5420_WriteReg(0x0212, 0x0000);
0000ec  2100              MOVS     r1,#0
0000ee  f2402012          MOV      r0,#0x212
0000f2  f7fffffe          BL       SPFD5420_WriteReg
;;;333    	SPFD5420_WriteReg(0x0213, 0x018F);
0000f6  f240118f          MOV      r1,#0x18f
0000fa  f2402013          MOV      r0,#0x213
0000fe  f7fffffe          BL       SPFD5420_WriteReg
;;;334    	SPFD5420_WriteReg(0x0280, 0x0000);
000102  2100              MOVS     r1,#0
000104  f44f7020          MOV      r0,#0x280
000108  f7fffffe          BL       SPFD5420_WriteReg
;;;335    	SPFD5420_WriteReg(0x0281, 0x0004);
00010c  2104              MOVS     r1,#4
00010e  f2402081          MOV      r0,#0x281
000112  f7fffffe          BL       SPFD5420_WriteReg
;;;336    	SPFD5420_WriteReg(0x0282, 0x0000);
000116  2100              MOVS     r1,#0
000118  f2402082          MOV      r0,#0x282
00011c  f7fffffe          BL       SPFD5420_WriteReg
;;;337    	SPFD5420_WriteReg(0x0300, 0x0101);
000120  f2401101          MOV      r1,#0x101
000124  f44f7040          MOV      r0,#0x300
000128  f7fffffe          BL       SPFD5420_WriteReg
;;;338    	SPFD5420_WriteReg(0x0301, 0x0B2C);
00012c  f640312c          MOV      r1,#0xb2c
000130  f2403001          MOV      r0,#0x301
000134  f7fffffe          BL       SPFD5420_WriteReg
;;;339    	SPFD5420_WriteReg(0x0302, 0x1030);
000138  f2410130          MOV      r1,#0x1030
00013c  f2403002          MOV      r0,#0x302
000140  f7fffffe          BL       SPFD5420_WriteReg
;;;340    	SPFD5420_WriteReg(0x0303, 0x3010);
000144  f2430110          MOV      r1,#0x3010
000148  f2403003          MOV      r0,#0x303
00014c  f7fffffe          BL       SPFD5420_WriteReg
;;;341    	SPFD5420_WriteReg(0x0304, 0x2C0B);
000150  f642410b          MOV      r1,#0x2c0b
000154  f44f7041          MOV      r0,#0x304
000158  f7fffffe          BL       SPFD5420_WriteReg
;;;342    	SPFD5420_WriteReg(0x0305, 0x0101);
00015c  f2401101          MOV      r1,#0x101
000160  f2403005          MOV      r0,#0x305
000164  f7fffffe          BL       SPFD5420_WriteReg
;;;343    	SPFD5420_WriteReg(0x0306, 0x0807);
000168  f6400107          MOV      r1,#0x807
00016c  f2403006          MOV      r0,#0x306
000170  f7fffffe          BL       SPFD5420_WriteReg
;;;344    	SPFD5420_WriteReg(0x0307, 0x0708);
000174  f44f61e1          MOV      r1,#0x708
000178  f2403007          MOV      r0,#0x307
00017c  f7fffffe          BL       SPFD5420_WriteReg
;;;345    	SPFD5420_WriteReg(0x0308, 0x0107);
000180  f2401107          MOV      r1,#0x107
000184  f44f7042          MOV      r0,#0x308
000188  f7fffffe          BL       SPFD5420_WriteReg
;;;346    	SPFD5420_WriteReg(0x0309, 0x0105);
00018c  f2401105          MOV      r1,#0x105
000190  f2403009          MOV      r0,#0x309
000194  f7fffffe          BL       SPFD5420_WriteReg
;;;347    	SPFD5420_WriteReg(0x030A, 0x0F04);
000198  f6407104          MOV      r1,#0xf04
00019c  f240300a          MOV      r0,#0x30a
0001a0  f7fffffe          BL       SPFD5420_WriteReg
;;;348    	SPFD5420_WriteReg(0x030B, 0x0F00);
0001a4  f44f6170          MOV      r1,#0xf00
0001a8  f240300b          MOV      r0,#0x30b
0001ac  f7fffffe          BL       SPFD5420_WriteReg
;;;349    	SPFD5420_WriteReg(0x030C, 0x000F);
0001b0  210f              MOVS     r1,#0xf
0001b2  f44f7043          MOV      r0,#0x30c
0001b6  f7fffffe          BL       SPFD5420_WriteReg
;;;350    	SPFD5420_WriteReg(0x030D, 0x040F);
0001ba  f240410f          MOV      r1,#0x40f
0001be  f240300d          MOV      r0,#0x30d
0001c2  f7fffffe          BL       SPFD5420_WriteReg
;;;351    	SPFD5420_WriteReg(0x030E, 0x0300);
0001c6  f44f7140          MOV      r1,#0x300
0001ca  f240300e          MOV      r0,#0x30e
0001ce  f7fffffe          BL       SPFD5420_WriteReg
;;;352    	SPFD5420_WriteReg(0x030F, 0x0701);
0001d2  f2407101          MOV      r1,#0x701
0001d6  f240300f          MOV      r0,#0x30f
0001da  f7fffffe          BL       SPFD5420_WriteReg
;;;353    	SPFD5420_WriteReg(0x0400, 0x3500);
0001de  f44f5154          MOV      r1,#0x3500
0001e2  f44f6080          MOV      r0,#0x400
0001e6  f7fffffe          BL       SPFD5420_WriteReg
;;;354    	SPFD5420_WriteReg(0x0401, 0x0001);
0001ea  2101              MOVS     r1,#1
0001ec  f2404001          MOV      r0,#0x401
0001f0  f7fffffe          BL       SPFD5420_WriteReg
;;;355    	SPFD5420_WriteReg(0x0404, 0x0000);
0001f4  2100              MOVS     r1,#0
0001f6  f2404004          MOV      r0,#0x404
0001fa  f7fffffe          BL       SPFD5420_WriteReg
;;;356    	SPFD5420_WriteReg(0x0500, 0x0000);
0001fe  2100              MOVS     r1,#0
000200  f44f60a0          MOV      r0,#0x500
000204  f7fffffe          BL       SPFD5420_WriteReg
;;;357    	SPFD5420_WriteReg(0x0501, 0x0000);
000208  2100              MOVS     r1,#0
00020a  f2405001          MOV      r0,#0x501
00020e  f7fffffe          BL       SPFD5420_WriteReg
;;;358    	SPFD5420_WriteReg(0x0502, 0x0000);
000212  2100              MOVS     r1,#0
000214  f2405002          MOV      r0,#0x502
000218  f7fffffe          BL       SPFD5420_WriteReg
;;;359    	SPFD5420_WriteReg(0x0503, 0x0000);
00021c  2100              MOVS     r1,#0
00021e  f2405003          MOV      r0,#0x503
000222  f7fffffe          BL       SPFD5420_WriteReg
;;;360    	SPFD5420_WriteReg(0x0504, 0x0000);
000226  2100              MOVS     r1,#0
000228  f2405004          MOV      r0,#0x504
00022c  f7fffffe          BL       SPFD5420_WriteReg
;;;361    	SPFD5420_WriteReg(0x0505, 0x0000);
000230  2100              MOVS     r1,#0
000232  f2405005          MOV      r0,#0x505
000236  f7fffffe          BL       SPFD5420_WriteReg
;;;362    	SPFD5420_WriteReg(0x0600, 0x0000);
00023a  2100              MOVS     r1,#0
00023c  f44f60c0          MOV      r0,#0x600
000240  f7fffffe          BL       SPFD5420_WriteReg
;;;363    	SPFD5420_WriteReg(0x0606, 0x0000);
000244  2100              MOVS     r1,#0
000246  f2406006          MOV      r0,#0x606
00024a  f7fffffe          BL       SPFD5420_WriteReg
;;;364    	SPFD5420_WriteReg(0x06F0, 0x0000);
00024e  2100              MOVS     r1,#0
000250  f44f60de          MOV      r0,#0x6f0
000254  f7fffffe          BL       SPFD5420_WriteReg
;;;365    	SPFD5420_WriteReg(0x07F0, 0x5420);
000258  f2454120          MOV      r1,#0x5420
00025c  f44f60fe          MOV      r0,#0x7f0
000260  f7fffffe          BL       SPFD5420_WriteReg
;;;366    	SPFD5420_WriteReg(0x07DE, 0x0000);
000264  2100              MOVS     r1,#0
000266  f24070de          MOV      r0,#0x7de
00026a  f7fffffe          BL       SPFD5420_WriteReg
;;;367    	SPFD5420_WriteReg(0x07F2, 0x00DF);
00026e  21df              MOVS     r1,#0xdf
000270  f24070f2          MOV      r0,#0x7f2
000274  f7fffffe          BL       SPFD5420_WriteReg
;;;368    	SPFD5420_WriteReg(0x07F3, 0x0810);
000278  f44f6101          MOV      r1,#0x810
00027c  f24070f3          MOV      r0,#0x7f3
000280  f7fffffe          BL       SPFD5420_WriteReg
;;;369    	SPFD5420_WriteReg(0x07F4, 0x0077);
000284  2177              MOVS     r1,#0x77
000286  f24070f4          MOV      r0,#0x7f4
00028a  f7fffffe          BL       SPFD5420_WriteReg
;;;370    	SPFD5420_WriteReg(0x07F5, 0x0021);
00028e  2121              MOVS     r1,#0x21
000290  f24070f5          MOV      r0,#0x7f5
000294  f7fffffe          BL       SPFD5420_WriteReg
;;;371    	SPFD5420_WriteReg(0x07F0, 0x0000);
000298  2100              MOVS     r1,#0
00029a  f44f60fe          MOV      r0,#0x7f0
00029e  f7fffffe          BL       SPFD5420_WriteReg
;;;372    	SPFD5420_WriteReg(0x0007, 0x0173);
0002a2  f2401173          MOV      r1,#0x173
0002a6  2007              MOVS     r0,#7
0002a8  f7fffffe          BL       SPFD5420_WriteReg
;;;373    
;;;374    	/* 设置显示窗口 WINDOWS */
;;;375    	SPFD5420_WriteReg(0x0210, 0);	/* 水平起始地址 */
0002ac  2100              MOVS     r1,#0
0002ae  f44f7004          MOV      r0,#0x210
0002b2  f7fffffe          BL       SPFD5420_WriteReg
;;;376    	SPFD5420_WriteReg(0x0211, 239);	/* 水平结束坐标 */
0002b6  21ef              MOVS     r1,#0xef
0002b8  f2402011          MOV      r0,#0x211
0002bc  f7fffffe          BL       SPFD5420_WriteReg
;;;377    	SPFD5420_WriteReg(0x0212, 0);	/* 垂直起始地址 */
0002c0  2100              MOVS     r1,#0
0002c2  f2402012          MOV      r0,#0x212
0002c6  f7fffffe          BL       SPFD5420_WriteReg
;;;378    	SPFD5420_WriteReg(0x0213, 399);	/* 垂直结束地址 */
0002ca  f240118f          MOV      r1,#0x18f
0002ce  f2402013          MOV      r0,#0x213
0002d2  f7fffffe          BL       SPFD5420_WriteReg
;;;379    }
0002d6  bd10              POP      {r4,pc}
;;;380    
                          ENDP


                          AREA ||i.Init_61509||, CODE, READONLY, ALIGN=1

                  Init_61509 PROC
;;;388    */
;;;389    static void Init_61509(void)
000000  b510              PUSH     {r4,lr}
;;;390    {
;;;391    	SPFD5420_WriteReg(0x000,0x0000);
000002  2100              MOVS     r1,#0
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       SPFD5420_WriteReg
;;;392    	SPFD5420_WriteReg(0x000,0x0000);
00000a  2100              MOVS     r1,#0
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       SPFD5420_WriteReg
;;;393    	SPFD5420_WriteReg(0x000,0x0000);
000012  2100              MOVS     r1,#0
000014  4608              MOV      r0,r1
000016  f7fffffe          BL       SPFD5420_WriteReg
;;;394    	SPFD5420_WriteReg(0x000,0x0000);
00001a  2100              MOVS     r1,#0
00001c  4608              MOV      r0,r1
00001e  f7fffffe          BL       SPFD5420_WriteReg
;;;395    	SPFD5420_Delaly10ms();
000022  f7fffffe          BL       SPFD5420_Delaly10ms
;;;396    
;;;397    	SPFD5420_WriteReg(0x008,0x0808);
000026  f6400108          MOV      r1,#0x808
00002a  2008              MOVS     r0,#8
00002c  f7fffffe          BL       SPFD5420_WriteReg
;;;398    	SPFD5420_WriteReg(0x010,0x0010);
000030  2110              MOVS     r1,#0x10
000032  4608              MOV      r0,r1
000034  f7fffffe          BL       SPFD5420_WriteReg
;;;399    	SPFD5420_WriteReg(0x400,0x6200);
000038  f44f41c4          MOV      r1,#0x6200
00003c  f44f6080          MOV      r0,#0x400
000040  f7fffffe          BL       SPFD5420_WriteReg
;;;400    
;;;401    	SPFD5420_WriteReg(0x300,0x0c06);	/* GAMMA */
000044  f6404106          MOV      r1,#0xc06
000048  f44f7040          MOV      r0,#0x300
00004c  f7fffffe          BL       SPFD5420_WriteReg
;;;402    	SPFD5420_WriteReg(0x301,0x9d0f);
000050  f649510f          MOV      r1,#0x9d0f
000054  f2403001          MOV      r0,#0x301
000058  f7fffffe          BL       SPFD5420_WriteReg
;;;403    	SPFD5420_WriteReg(0x302,0x0b05);
00005c  f6403105          MOV      r1,#0xb05
000060  f2403002          MOV      r0,#0x302
000064  f7fffffe          BL       SPFD5420_WriteReg
;;;404    	SPFD5420_WriteReg(0x303,0x1217);
000068  f2412117          MOV      r1,#0x1217
00006c  f2403003          MOV      r0,#0x303
000070  f7fffffe          BL       SPFD5420_WriteReg
;;;405    	SPFD5420_WriteReg(0x304,0x3333);
000074  f2433133          MOV      r1,#0x3333
000078  f44f7041          MOV      r0,#0x304
00007c  f7fffffe          BL       SPFD5420_WriteReg
;;;406    	SPFD5420_WriteReg(0x305,0x1712);
000080  f2417112          MOV      r1,#0x1712
000084  f2403005          MOV      r0,#0x305
000088  f7fffffe          BL       SPFD5420_WriteReg
;;;407    	SPFD5420_WriteReg(0x306,0x950b);
00008c  f249510b          MOV      r1,#0x950b
000090  f2403006          MOV      r0,#0x306
000094  f7fffffe          BL       SPFD5420_WriteReg
;;;408    	SPFD5420_WriteReg(0x307,0x0f0d);
000098  f640710d          MOV      r1,#0xf0d
00009c  f2403007          MOV      r0,#0x307
0000a0  f7fffffe          BL       SPFD5420_WriteReg
;;;409    	SPFD5420_WriteReg(0x308,0x060c);
0000a4  f240610c          MOV      r1,#0x60c
0000a8  f44f7042          MOV      r0,#0x308
0000ac  f7fffffe          BL       SPFD5420_WriteReg
;;;410    	SPFD5420_WriteReg(0x309,0x0000);
0000b0  2100              MOVS     r1,#0
0000b2  f2403009          MOV      r0,#0x309
0000b6  f7fffffe          BL       SPFD5420_WriteReg
;;;411    
;;;412    	SPFD5420_WriteReg(0x011,0x0202);
0000ba  f2402102          MOV      r1,#0x202
0000be  2011              MOVS     r0,#0x11
0000c0  f7fffffe          BL       SPFD5420_WriteReg
;;;413    	SPFD5420_WriteReg(0x012,0x0101);
0000c4  f2401101          MOV      r1,#0x101
0000c8  2012              MOVS     r0,#0x12
0000ca  f7fffffe          BL       SPFD5420_WriteReg
;;;414    	SPFD5420_WriteReg(0x013,0x0001);
0000ce  2101              MOVS     r1,#1
0000d0  2013              MOVS     r0,#0x13
0000d2  f7fffffe          BL       SPFD5420_WriteReg
;;;415    
;;;416    	SPFD5420_WriteReg(0x007,0x0001);
0000d6  2101              MOVS     r1,#1
0000d8  2007              MOVS     r0,#7
0000da  f7fffffe          BL       SPFD5420_WriteReg
;;;417    	SPFD5420_WriteReg(0x100,0x0730);	/* BT,AP 0x0330　*/
0000de  f44f61e6          MOV      r1,#0x730
0000e2  f44f7080          MOV      r0,#0x100
0000e6  f7fffffe          BL       SPFD5420_WriteReg
;;;418    	SPFD5420_WriteReg(0x101,0x0237);	/* DC0,DC1,VC */
0000ea  f2402137          MOV      r1,#0x237
0000ee  f2401001          MOV      r0,#0x101
0000f2  f7fffffe          BL       SPFD5420_WriteReg
;;;419    	SPFD5420_WriteReg(0x103,0x2b00);	/* VDV	//0x0f00 */
0000f6  f44f512c          MOV      r1,#0x2b00
0000fa  f2401003          MOV      r0,#0x103
0000fe  f7fffffe          BL       SPFD5420_WriteReg
;;;420    	SPFD5420_WriteReg(0x280,0x4000);	/* VCM */
000102  f44f4180          MOV      r1,#0x4000
000106  f44f7020          MOV      r0,#0x280
00010a  f7fffffe          BL       SPFD5420_WriteReg
;;;421    	SPFD5420_WriteReg(0x102,0x81b0);	/* VRH,VCMR,PSON,PON */
00010e  f24811b0          MOV      r1,#0x81b0
000112  f44f7081          MOV      r0,#0x102
000116  f7fffffe          BL       SPFD5420_WriteReg
;;;422    	SPFD5420_Delaly10ms();
00011a  f7fffffe          BL       SPFD5420_Delaly10ms
;;;423    
;;;424    	SPFD5420_WriteReg(0x001,0x0100);
00011e  f44f7180          MOV      r1,#0x100
000122  2001              MOVS     r0,#1
000124  f7fffffe          BL       SPFD5420_WriteReg
;;;425    	SPFD5420_WriteReg(0x002,0x0100);
000128  f44f7180          MOV      r1,#0x100
00012c  2002              MOVS     r0,#2
00012e  f7fffffe          BL       SPFD5420_WriteReg
;;;426    	/* SPFD5420_WriteReg(0x003,0x1030); */
;;;427    	SPFD5420_WriteReg(0x003,0x1018);
000132  f2410118          MOV      r1,#0x1018
000136  2003              MOVS     r0,#3
000138  f7fffffe          BL       SPFD5420_WriteReg
;;;428    	SPFD5420_WriteReg(0x009,0x0001);
00013c  2101              MOVS     r1,#1
00013e  2009              MOVS     r0,#9
000140  f7fffffe          BL       SPFD5420_WriteReg
;;;429    
;;;430    	SPFD5420_WriteReg(0x0C,0x0000);	/* MCU interface  */
000144  2100              MOVS     r1,#0
000146  200c              MOVS     r0,#0xc
000148  f7fffffe          BL       SPFD5420_WriteReg
;;;431    	/*
;;;432    		SPFD5420_WriteReg(0x0C,0x0110);	//RGB interface 18bit
;;;433    		SPFD5420_WriteReg(0x0C,0x0111);	//RGB interface 16bit
;;;434    		SPFD5420_WriteReg(0x0C,0x0020);	//VSYNC interface
;;;435    	*/
;;;436    
;;;437    	SPFD5420_WriteReg(0x090,0x8000);
00014c  f44f4100          MOV      r1,#0x8000
000150  2090              MOVS     r0,#0x90
000152  f7fffffe          BL       SPFD5420_WriteReg
;;;438    	SPFD5420_WriteReg(0x00f,0x0000);
000156  2100              MOVS     r1,#0
000158  200f              MOVS     r0,#0xf
00015a  f7fffffe          BL       SPFD5420_WriteReg
;;;439    
;;;440    	SPFD5420_WriteReg(0x210,0x0000);
00015e  2100              MOVS     r1,#0
000160  f44f7004          MOV      r0,#0x210
000164  f7fffffe          BL       SPFD5420_WriteReg
;;;441    	SPFD5420_WriteReg(0x211,0x00ef);
000168  21ef              MOVS     r1,#0xef
00016a  f2402011          MOV      r0,#0x211
00016e  f7fffffe          BL       SPFD5420_WriteReg
;;;442    	SPFD5420_WriteReg(0x212,0x0000);
000172  2100              MOVS     r1,#0
000174  f2402012          MOV      r0,#0x212
000178  f7fffffe          BL       SPFD5420_WriteReg
;;;443    	SPFD5420_WriteReg(0x213,0x018f);
00017c  f240118f          MOV      r1,#0x18f
000180  f2402013          MOV      r0,#0x213
000184  f7fffffe          BL       SPFD5420_WriteReg
;;;444    
;;;445    	SPFD5420_WriteReg(0x500,0x0000);
000188  2100              MOVS     r1,#0
00018a  f44f60a0          MOV      r0,#0x500
00018e  f7fffffe          BL       SPFD5420_WriteReg
;;;446    	SPFD5420_WriteReg(0x501,0x0000);
000192  2100              MOVS     r1,#0
000194  f2405001          MOV      r0,#0x501
000198  f7fffffe          BL       SPFD5420_WriteReg
;;;447    	SPFD5420_WriteReg(0x502,0x005f);
00019c  215f              MOVS     r1,#0x5f
00019e  f2405002          MOV      r0,#0x502
0001a2  f7fffffe          BL       SPFD5420_WriteReg
;;;448    	SPFD5420_WriteReg(0x401,0x0001);
0001a6  2101              MOVS     r1,#1
0001a8  f2404001          MOV      r0,#0x401
0001ac  f7fffffe          BL       SPFD5420_WriteReg
;;;449    	SPFD5420_WriteReg(0x404,0x0000);
0001b0  2100              MOVS     r1,#0
0001b2  f2404004          MOV      r0,#0x404
0001b6  f7fffffe          BL       SPFD5420_WriteReg
;;;450    	SPFD5420_Delaly10ms();
0001ba  f7fffffe          BL       SPFD5420_Delaly10ms
;;;451    	SPFD5420_WriteReg(0x007,0x0100);
0001be  f44f7180          MOV      r1,#0x100
0001c2  2007              MOVS     r0,#7
0001c4  f7fffffe          BL       SPFD5420_WriteReg
;;;452    	SPFD5420_Delaly10ms();
0001c8  f7fffffe          BL       SPFD5420_Delaly10ms
;;;453    	SPFD5420_WriteReg(0x200,0x0000);
0001cc  2100              MOVS     r1,#0
0001ce  f44f7000          MOV      r0,#0x200
0001d2  f7fffffe          BL       SPFD5420_WriteReg
;;;454    	SPFD5420_WriteReg(0x201,0x0000);
0001d6  2100              MOVS     r1,#0
0001d8  f2402001          MOV      r0,#0x201
0001dc  f7fffffe          BL       SPFD5420_WriteReg
;;;455    }
0001e0  bd10              POP      {r4,pc}
;;;456    
                          ENDP


                          AREA ||i.SPFD5420_BGR2RGB||, CODE, READONLY, ALIGN=1

                  SPFD5420_BGR2RGB PROC
;;;210    */
;;;211    static uint16_t SPFD5420_BGR2RGB(uint16_t _usRGB)
000000  b530              PUSH     {r4,r5,lr}
;;;212    {
000002  4601              MOV      r1,r0
;;;213    	uint16_t  r, g, b, rgb;
;;;214    
;;;215    	b = (_usRGB >> 0)  & 0x1F;
000004  f001041f          AND      r4,r1,#0x1f
;;;216    	g = (_usRGB >> 5)  & 0x3F;
000008  f3c11345          UBFX     r3,r1,#5,#6
;;;217    	r = (_usRGB >> 11) & 0x1F;
00000c  0aca              LSRS     r2,r1,#11
;;;218    
;;;219    	rgb = (b<<11) + (g<<5) + (r<<0);
00000e  02e5              LSLS     r5,r4,#11
000010  eb051543          ADD      r5,r5,r3,LSL #5
000014  4415              ADD      r5,r5,r2
000016  b2a8              UXTH     r0,r5
;;;220    
;;;221    	return( rgb );
;;;222    }
000018  bd30              POP      {r4,r5,pc}
;;;223    
                          ENDP


                          AREA ||i.SPFD5420_ClrScr||, CODE, READONLY, ALIGN=2

                  SPFD5420_ClrScr PROC
;;;557    */
;;;558    void SPFD5420_ClrScr(uint16_t _usColor)
000000  b570              PUSH     {r4-r6,lr}
;;;559    {
000002  4604              MOV      r4,r0
;;;560    	uint32_t i;
;;;561    
;;;562    	SPFD5420_SetCursor(0, 0);		/* 设置光标位置 */
000004  2100              MOVS     r1,#0
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       SPFD5420_SetCursor
;;;563    
;;;564    	SPFD5420_REG = 0x202; 			/* 准备读写显存 */
00000c  f2402002          MOV      r0,#0x202
000010  f04f41c0          MOV      r1,#0x60000000
000014  8008              STRH     r0,[r1,#0]
;;;565    
;;;566    	for (i = 0; i < g_LcdHeight * g_LcdWidth; i++)
000016  2500              MOVS     r5,#0
000018  e002              B        |L4.32|
                  |L4.26|
;;;567    	{
;;;568    		SPFD5420_RAM = _usColor;
00001a  4805              LDR      r0,|L4.48|
00001c  8004              STRH     r4,[r0,#0]
00001e  1c6d              ADDS     r5,r5,#1              ;566
                  |L4.32|
000020  4804              LDR      r0,|L4.52|
000022  8800              LDRH     r0,[r0,#0]            ;566  ; g_LcdHeight
000024  4904              LDR      r1,|L4.56|
000026  8809              LDRH     r1,[r1,#0]            ;566  ; g_LcdWidth
000028  4348              MULS     r0,r1,r0              ;566
00002a  42a8              CMP      r0,r5                 ;566
00002c  d8f5              BHI      |L4.26|
;;;569    	}
;;;570    }
00002e  bd70              POP      {r4-r6,pc}
;;;571    
                          ENDP

                  |L4.48|
                          DCD      0x60080000
                  |L4.52|
                          DCD      g_LcdHeight
                  |L4.56|
                          DCD      g_LcdWidth

                          AREA ||i.SPFD5420_Delaly10ms||, CODE, READONLY, ALIGN=1

                  SPFD5420_Delaly10ms PROC
;;;69     */
;;;70     static void SPFD5420_Delaly10ms(void)
000000  2000              MOVS     r0,#0
;;;71     {
;;;72     	uint16_t i;
;;;73     
;;;74     	for (i = 0; i < 50000; i++);
000002  e001              B        |L5.8|
                  |L5.4|
000004  1c41              ADDS     r1,r0,#1
000006  b288              UXTH     r0,r1
                  |L5.8|
000008  f24c3150          MOV      r1,#0xc350
00000c  4288              CMP      r0,r1
00000e  dbf9              BLT      |L5.4|
;;;75     }
000010  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||i.SPFD5420_DispOff||, CODE, READONLY, ALIGN=1

                  SPFD5420_DispOff PROC
;;;544    */
;;;545    void SPFD5420_DispOff(void)
000000  b510              PUSH     {r4,lr}
;;;546    {
;;;547    	SPFD5420_WriteReg(7, 0x0000);
000002  2100              MOVS     r1,#0
000004  2007              MOVS     r0,#7
000006  f7fffffe          BL       SPFD5420_WriteReg
;;;548    }
00000a  bd10              POP      {r4,pc}
;;;549    
                          ENDP


                          AREA ||i.SPFD5420_DispOn||, CODE, READONLY, ALIGN=2

                  SPFD5420_DispOn PROC
;;;524    */
;;;525    void SPFD5420_DispOn(void)
000000  b510              PUSH     {r4,lr}
;;;526    {
;;;527    	if (g_ChipID == IC_61509)
000002  4809              LDR      r0,|L7.40|
000004  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000006  f5a04135          SUB      r1,r0,#0xb500
00000a  3909              SUBS     r1,r1,#9
00000c  d105              BNE      |L7.26|
;;;528    	{
;;;529    		SPFD5420_WriteReg(0x007,0x0100);
00000e  f44f7180          MOV      r1,#0x100
000012  2007              MOVS     r0,#7
000014  f7fffffe          BL       SPFD5420_WriteReg
000018  e004              B        |L7.36|
                  |L7.26|
;;;530    	}
;;;531    	else	/* IC_4001 */
;;;532    	{
;;;533    		SPFD5420_WriteReg(7, 0x0173); /* 设置262K颜色并且打开显示 */
00001a  f2401173          MOV      r1,#0x173
00001e  2007              MOVS     r0,#7
000020  f7fffffe          BL       SPFD5420_WriteReg
                  |L7.36|
;;;534    	}
;;;535    }
000024  bd10              POP      {r4,pc}
;;;536    
                          ENDP

000026  0000              DCW      0x0000
                  |L7.40|
                          DCD      g_ChipID

                          AREA ||i.SPFD5420_DrawBMP||, CODE, READONLY, ALIGN=1

                  SPFD5420_DrawBMP PROC
;;;945    */
;;;946    void SPFD5420_DrawBMP(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t *_ptr)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;947    {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  f8dda020          LDR      r10,[sp,#0x20]
;;;948    	uint32_t index = 0;
000010  2600              MOVS     r6,#0
;;;949    	const uint16_t *p;
;;;950    
;;;951    	/* 设置图片的位置和大小， 即设置显示窗口 */
;;;952    	SPFD5420_SetDispWin(_usX, _usY, _usHeight, _usWidth);
000012  462b              MOV      r3,r5
000014  4622              MOV      r2,r4
000016  4649              MOV      r1,r9
000018  4640              MOV      r0,r8
00001a  f7fffffe          BL       SPFD5420_SetDispWin
;;;953    
;;;954    	p = _ptr;
00001e  4657              MOV      r7,r10
;;;955    	for (index = 0; index < _usHeight * _usWidth; index++)
000020  bf00              NOP      
000022  e006              B        |L8.50|
                  |L8.36|
;;;956    	{
;;;957    		SPFD5420_PutPixel(_usX, _usY, *p++);
000024  f8372b02          LDRH     r2,[r7],#2
000028  4649              MOV      r1,r9
00002a  4640              MOV      r0,r8
00002c  f7fffffe          BL       SPFD5420_PutPixel
000030  1c76              ADDS     r6,r6,#1              ;955
                  |L8.50|
000032  fb04f005          MUL      r0,r4,r5              ;955
000036  42b0              CMP      r0,r6                 ;955
000038  d8f4              BHI      |L8.36|
;;;958    	}
;;;959    
;;;960    	/* 退出窗口绘图模式 */
;;;961    	SPFD5420_QuitWinMode();
00003a  f7fffffe          BL       SPFD5420_QuitWinMode
;;;962    }
00003e  e8bd87f0          POP      {r4-r10,pc}
;;;963    
                          ENDP


                          AREA ||i.SPFD5420_DrawCircle||, CODE, READONLY, ALIGN=1

                  SPFD5420_DrawCircle PROC
;;;899    */
;;;900    void SPFD5420_DrawCircle(uint16_t _usX, uint16_t _usY, uint16_t _usRadius, uint16_t _usColor)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;901    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  469a              MOV      r10,r3
;;;902    	int32_t  D;			/* Decision Variable */
;;;903    	uint32_t  CurX;		/* 当前 X 值 */
;;;904    	uint32_t  CurY;		/* 当前 Y 值 */
;;;905    
;;;906    	D = 3 - (_usRadius << 1);
00000c  2003              MOVS     r0,#3
00000e  eba00948          SUB      r9,r0,r8,LSL #1
;;;907    	CurX = 0;
000012  2400              MOVS     r4,#0
;;;908    	CurY = _usRadius;
000014  4645              MOV      r5,r8
;;;909    
;;;910    	while (CurX <= CurY)
000016  e046              B        |L9.166|
                  |L9.24|
;;;911    	{
;;;912    		SPFD5420_PutPixel(_usX + CurX, _usY + CurY, _usColor);
000018  197a              ADDS     r2,r7,r5
00001a  b291              UXTH     r1,r2
00001c  1932              ADDS     r2,r6,r4
00001e  b290              UXTH     r0,r2
000020  4652              MOV      r2,r10
000022  f7fffffe          BL       SPFD5420_PutPixel
;;;913    		SPFD5420_PutPixel(_usX + CurX, _usY - CurY, _usColor);
000026  1b7a              SUBS     r2,r7,r5
000028  b291              UXTH     r1,r2
00002a  1932              ADDS     r2,r6,r4
00002c  b290              UXTH     r0,r2
00002e  4652              MOV      r2,r10
000030  f7fffffe          BL       SPFD5420_PutPixel
;;;914    		SPFD5420_PutPixel(_usX - CurX, _usY + CurY, _usColor);
000034  197a              ADDS     r2,r7,r5
000036  b291              UXTH     r1,r2
000038  1b32              SUBS     r2,r6,r4
00003a  b290              UXTH     r0,r2
00003c  4652              MOV      r2,r10
00003e  f7fffffe          BL       SPFD5420_PutPixel
;;;915    		SPFD5420_PutPixel(_usX - CurX, _usY - CurY, _usColor);
000042  1b7a              SUBS     r2,r7,r5
000044  b291              UXTH     r1,r2
000046  1b32              SUBS     r2,r6,r4
000048  b290              UXTH     r0,r2
00004a  4652              MOV      r2,r10
00004c  f7fffffe          BL       SPFD5420_PutPixel
;;;916    		SPFD5420_PutPixel(_usX + CurY, _usY + CurX, _usColor);
000050  193a              ADDS     r2,r7,r4
000052  b291              UXTH     r1,r2
000054  1972              ADDS     r2,r6,r5
000056  b290              UXTH     r0,r2
000058  4652              MOV      r2,r10
00005a  f7fffffe          BL       SPFD5420_PutPixel
;;;917    		SPFD5420_PutPixel(_usX + CurY, _usY - CurX, _usColor);
00005e  1b3a              SUBS     r2,r7,r4
000060  b291              UXTH     r1,r2
000062  1972              ADDS     r2,r6,r5
000064  b290              UXTH     r0,r2
000066  4652              MOV      r2,r10
000068  f7fffffe          BL       SPFD5420_PutPixel
;;;918    		SPFD5420_PutPixel(_usX - CurY, _usY + CurX, _usColor);
00006c  193a              ADDS     r2,r7,r4
00006e  b291              UXTH     r1,r2
000070  1b72              SUBS     r2,r6,r5
000072  b290              UXTH     r0,r2
000074  4652              MOV      r2,r10
000076  f7fffffe          BL       SPFD5420_PutPixel
;;;919    		SPFD5420_PutPixel(_usX - CurY, _usY - CurX, _usColor);
00007a  1b3a              SUBS     r2,r7,r4
00007c  b291              UXTH     r1,r2
00007e  1b72              SUBS     r2,r6,r5
000080  b290              UXTH     r0,r2
000082  4652              MOV      r2,r10
000084  f7fffffe          BL       SPFD5420_PutPixel
;;;920    
;;;921    		if (D < 0)
000088  f1b90f00          CMP      r9,#0
00008c  da04              BGE      |L9.152|
;;;922    		{
;;;923    			D += (CurX << 2) + 6;
00008e  2006              MOVS     r0,#6
000090  eb000084          ADD      r0,r0,r4,LSL #2
000094  4481              ADD      r9,r9,r0
000096  e005              B        |L9.164|
                  |L9.152|
;;;924    		}
;;;925    		else
;;;926    		{
;;;927    			D += ((CurX - CurY) << 2) + 10;
000098  1b60              SUBS     r0,r4,r5
00009a  210a              MOVS     r1,#0xa
00009c  eb010080          ADD      r0,r1,r0,LSL #2
0000a0  4481              ADD      r9,r9,r0
;;;928    			CurY--;
0000a2  1e6d              SUBS     r5,r5,#1
                  |L9.164|
;;;929    		}
;;;930    		CurX++;
0000a4  1c64              ADDS     r4,r4,#1
                  |L9.166|
0000a6  42ac              CMP      r4,r5                 ;910
0000a8  d9b6              BLS      |L9.24|
;;;931    	}
;;;932    }
0000aa  e8bd87f0          POP      {r4-r10,pc}
;;;933    
                          ENDP


                          AREA ||i.SPFD5420_DrawHColorLine||, CODE, READONLY, ALIGN=2

                  SPFD5420_DrawHColorLine PROC
;;;757    */
;;;758    void SPFD5420_DrawHColorLine(uint16_t _usX1 , uint16_t _usY1, uint16_t _usWidth, const uint16_t *_pColor)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;759    {
000004  4605              MOV      r5,r0
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
00000a  461c              MOV      r4,r3
;;;760    	uint16_t i;
;;;761    
;;;762    	/* 展开 SPFD5420_SetCursor(_usX1, _usY1) 函数，提高执行效率 */
;;;763    	/*
;;;764    		px，py 是物理坐标， x，y是虚拟坐标
;;;765    		转换公式:
;;;766    		py = 399 - x;
;;;767    		px = y;
;;;768    	*/
;;;769    	SPFD5420_WriteReg(0x0200, _usY1);  		/* px */
00000c  4641              MOV      r1,r8
00000e  f44f7000          MOV      r0,#0x200
000012  f7fffffe          BL       SPFD5420_WriteReg
;;;770    	SPFD5420_WriteReg(0x0201, 399 - _usX1);	/* py */
000016  f240108f          MOV      r0,#0x18f
00001a  1b40              SUBS     r0,r0,r5
00001c  b281              UXTH     r1,r0
00001e  f2402001          MOV      r0,#0x201
000022  f7fffffe          BL       SPFD5420_WriteReg
;;;771    
;;;772    	/* 写显存 */
;;;773    	SPFD5420_REG = 0x202;
000026  f2402002          MOV      r0,#0x202
00002a  f04f41c0          MOV      r1,#0x60000000
00002e  8008              STRH     r0,[r1,#0]
;;;774    	for (i = 0; i < _usWidth; i++)
000030  2700              MOVS     r7,#0
000032  e005              B        |L10.64|
                  |L10.52|
;;;775    	{
;;;776    		SPFD5420_RAM = *_pColor++;
000034  f8340b02          LDRH     r0,[r4],#2
000038  4903              LDR      r1,|L10.72|
00003a  8008              STRH     r0,[r1,#0]
00003c  1c78              ADDS     r0,r7,#1              ;774
00003e  b287              UXTH     r7,r0                 ;774
                  |L10.64|
000040  42b7              CMP      r7,r6                 ;774
000042  dbf7              BLT      |L10.52|
;;;777    	}
;;;778    }
000044  e8bd81f0          POP      {r4-r8,pc}
;;;779    
                          ENDP

                  |L10.72|
                          DCD      0x60080000

                          AREA ||i.SPFD5420_DrawHLine||, CODE, READONLY, ALIGN=2

                  SPFD5420_DrawHLine PROC
;;;724    */
;;;725    void SPFD5420_DrawHLine(uint16_t _usX1 , uint16_t _usY1 , uint16_t _usX2 , uint16_t _usColor)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;726    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;727    	uint16_t i;
;;;728    
;;;729    	/* 展开 SPFD5420_SetCursor(_usX1, _usY1) 函数，提高执行效率 */
;;;730    	/*
;;;731    		px，py 是物理坐标， x，y是虚拟坐标
;;;732    		转换公式:
;;;733    		py = 399 - x;
;;;734    		px = y;
;;;735    	*/
;;;736    	SPFD5420_WriteReg(0x0200, _usY1);  		/* px */
00000c  4641              MOV      r1,r8
00000e  f44f7000          MOV      r0,#0x200
000012  f7fffffe          BL       SPFD5420_WriteReg
;;;737    	SPFD5420_WriteReg(0x0201, 399 - _usX1);	/* py */
000016  f240108f          MOV      r0,#0x18f
00001a  1b00              SUBS     r0,r0,r4
00001c  b281              UXTH     r1,r0
00001e  f2402001          MOV      r0,#0x201
000022  f7fffffe          BL       SPFD5420_WriteReg
;;;738    
;;;739    	/* 写显存 */
;;;740    	SPFD5420_REG = 0x202;
000026  f2402002          MOV      r0,#0x202
00002a  f04f41c0          MOV      r1,#0x60000000
00002e  8008              STRH     r0,[r1,#0]
;;;741    	for (i = 0; i < _usX2 - _usX1 + 1; i++)
000030  2700              MOVS     r7,#0
000032  e003              B        |L11.60|
                  |L11.52|
;;;742    	{
;;;743    		SPFD5420_RAM = _usColor;
000034  4804              LDR      r0,|L11.72|
000036  8006              STRH     r6,[r0,#0]
000038  1c78              ADDS     r0,r7,#1              ;741
00003a  b287              UXTH     r7,r0                 ;741
                  |L11.60|
00003c  1b28              SUBS     r0,r5,r4              ;741
00003e  1c40              ADDS     r0,r0,#1              ;741
000040  42b8              CMP      r0,r7                 ;741
000042  dcf7              BGT      |L11.52|
;;;744    	}
;;;745    }
000044  e8bd81f0          POP      {r4-r8,pc}
;;;746    
                          ENDP

                  |L11.72|
                          DCD      0x60080000

                          AREA ||i.SPFD5420_DrawHTransLine||, CODE, READONLY, ALIGN=2

                  SPFD5420_DrawHTransLine PROC
;;;827    */
;;;828    void SPFD5420_DrawHTransLine(uint16_t _usX1 , uint16_t _usY1, uint16_t _usWidth, const uint16_t *_pColor)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;829    {
000004  4605              MOV      r5,r0
000006  468a              MOV      r10,r1
000008  4617              MOV      r7,r2
00000a  461e              MOV      r6,r3
;;;830    	uint16_t i, j;
;;;831    	uint16_t Index;
;;;832    
;;;833    	/* 展开 SPFD5420_SetCursor(_usX1, _usY1) 函数，提高执行效率 */
;;;834    	/*
;;;835    		px，py 是物理坐标， x，y是虚拟坐标
;;;836    		转换公式:
;;;837    		py = 399 - x;
;;;838    		px = y;
;;;839    	*/
;;;840    	SPFD5420_WriteReg(0x0200, _usY1);  		/* px */
00000c  4651              MOV      r1,r10
00000e  f44f7000          MOV      r0,#0x200
000012  f7fffffe          BL       SPFD5420_WriteReg
;;;841    	SPFD5420_WriteReg(0x0201, 399 - _usX1);	/* py */
000016  f240108f          MOV      r0,#0x18f
00001a  1b40              SUBS     r0,r0,r5
00001c  b281              UXTH     r1,r0
00001e  f2402001          MOV      r0,#0x201
000022  f7fffffe          BL       SPFD5420_WriteReg
;;;842    
;;;843    	/* 写显存 */
;;;844    	SPFD5420_REG = 0x202;
000026  f2402002          MOV      r0,#0x202
00002a  f04f41c0          MOV      r1,#0x60000000
00002e  8008              STRH     r0,[r1,#0]
;;;845    	for (i = 0,j = 0; i < _usWidth; i++, j++)
000030  f04f0800          MOV      r8,#0
000034  f04f0900          MOV      r9,#0
000038  e01a              B        |L12.112|
                  |L12.58|
;;;846    	{
;;;847    		Index = *_pColor++;
00003a  f8364b02          LDRH     r4,[r6],#2
;;;848    	    if (Index)
00003e  b114              CBZ      r4,|L12.70|
;;;849            {
;;;850    			 SPFD5420_RAM = Index;
000040  480d              LDR      r0,|L12.120|
000042  8004              STRH     r4,[r0,#0]
000044  e00c              B        |L12.96|
                  |L12.70|
;;;851    		}
;;;852    		else
;;;853    		{
;;;854    			SPFD5420_SetCursor(_usX1 + j, _usY1);
000046  eb050109          ADD      r1,r5,r9
00004a  b288              UXTH     r0,r1
00004c  4651              MOV      r1,r10
00004e  f7fffffe          BL       SPFD5420_SetCursor
;;;855    			SPFD5420_REG = 0x202;
000052  f2402002          MOV      r0,#0x202
000056  f04f41c0          MOV      r1,#0x60000000
00005a  8008              STRH     r0,[r1,#0]
;;;856    			SPFD5420_RAM = Index;
00005c  4806              LDR      r0,|L12.120|
00005e  8004              STRH     r4,[r0,#0]
                  |L12.96|
000060  f1080001          ADD      r0,r8,#1              ;845
000064  fa1ff880          UXTH     r8,r0                 ;845
000068  f1090001          ADD      r0,r9,#1              ;845
00006c  fa1ff980          UXTH     r9,r0                 ;845
                  |L12.112|
000070  45b8              CMP      r8,r7                 ;845
000072  dbe2              BLT      |L12.58|
;;;857    		}
;;;858    	}
;;;859    }
000074  e8bd87f0          POP      {r4-r10,pc}
;;;860    
                          ENDP

                  |L12.120|
                          DCD      0x60080000

                          AREA ||i.SPFD5420_DrawLine||, CODE, READONLY, ALIGN=1

                  SPFD5420_DrawLine PROC
;;;634    */
;;;635    void SPFD5420_DrawLine(uint16_t _usX1 , uint16_t _usY1 , uint16_t _usX2 , uint16_t _usY2 , uint16_t _usColor)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;636    {
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
00000c  461f              MOV      r7,r3
;;;637    	int32_t dx , dy ;
;;;638    	int32_t tx , ty ;
;;;639    	int32_t inc1 , inc2 ;
;;;640    	int32_t d , iTag ;
;;;641    	int32_t x , y ;
;;;642    
;;;643    	/* 采用 Bresenham 算法，在2点间画一条直线 */
;;;644    
;;;645    	SPFD5420_PutPixel(_usX1 , _usY1 , _usColor);
00000e  4629              MOV      r1,r5
000010  4620              MOV      r0,r4
000012  9a10              LDR      r2,[sp,#0x40]
000014  f7fffffe          BL       SPFD5420_PutPixel
;;;646    
;;;647    	/* 如果两点重合，结束后面的动作。*/
;;;648    	if ( _usX1 == _usX2 && _usY1 == _usY2 )
000018  42b4              CMP      r4,r6
00001a  d104              BNE      |L13.38|
00001c  42bd              CMP      r5,r7
00001e  d102              BNE      |L13.38|
                  |L13.32|
;;;649    	{
;;;650    		return;
;;;651    	}
;;;652    
;;;653    	iTag = 0 ;
;;;654    	/* dx = abs ( _usX2 - _usX1 ); */
;;;655    	if (_usX2 >= _usX1)
;;;656    	{
;;;657    		dx = _usX2 - _usX1;
;;;658    	}
;;;659    	else
;;;660    	{
;;;661    		dx = _usX1 - _usX2;
;;;662    	}
;;;663    
;;;664    	/* dy = abs ( _usY2 - _usY1 ); */
;;;665    	if (_usY2 >= _usY1)
;;;666    	{
;;;667    		dy = _usY2 - _usY1;
;;;668    	}
;;;669    	else
;;;670    	{
;;;671    		dy = _usY1 - _usY2;
;;;672    	}
;;;673    
;;;674    	if ( dx < dy )   /*如果dy为计长方向，则交换纵横坐标。*/
;;;675    	{
;;;676    		uint16_t temp;
;;;677    
;;;678    		iTag = 1 ;
;;;679    		temp = _usX1; _usX1 = _usY1; _usY1 = temp;
;;;680    		temp = _usX2; _usX2 = _usY2; _usY2 = temp;
;;;681    		temp = dx; dx = dy; dy = temp;
;;;682    	}
;;;683    	tx = _usX2 > _usX1 ? 1 : -1 ;    /* 确定是增1还是减1 */
;;;684    	ty = _usY2 > _usY1 ? 1 : -1 ;
;;;685    	x = _usX1 ;
;;;686    	y = _usY1 ;
;;;687    	inc1 = 2 * dy ;
;;;688    	inc2 = 2 * ( dy - dx );
;;;689    	d = inc1 - dx ;
;;;690    	while ( x != _usX2 )     /* 循环画点 */
;;;691    	{
;;;692    		if ( d < 0 )
;;;693    		{
;;;694    			d += inc1 ;
;;;695    		}
;;;696    		else
;;;697    		{
;;;698    			y += ty ;
;;;699    			d += inc2 ;
;;;700    		}
;;;701    		if ( iTag )
;;;702    		{
;;;703    			SPFD5420_PutPixel ( y , x , _usColor) ;
;;;704    		}
;;;705    		else
;;;706    		{
;;;707    			SPFD5420_PutPixel ( x , y , _usColor) ;
;;;708    		}
;;;709    		x += tx ;
;;;710    	}
;;;711    }
000020  b007              ADD      sp,sp,#0x1c
000022  e8bd8ff0          POP      {r4-r11,pc}
                  |L13.38|
000026  2000              MOVS     r0,#0                 ;653
000028  9002              STR      r0,[sp,#8]            ;653
00002a  42a6              CMP      r6,r4                 ;655
00002c  db02              BLT      |L13.52|
00002e  eba60804          SUB      r8,r6,r4              ;657
000032  e001              B        |L13.56|
                  |L13.52|
000034  eba40806          SUB      r8,r4,r6              ;661
                  |L13.56|
000038  42af              CMP      r7,r5                 ;665
00003a  db02              BLT      |L13.66|
00003c  eba70905          SUB      r9,r7,r5              ;667
000040  e001              B        |L13.70|
                  |L13.66|
000042  eba50907          SUB      r9,r5,r7              ;671
                  |L13.70|
000046  45c8              CMP      r8,r9                 ;674
000048  da0c              BGE      |L13.100|
00004a  2101              MOVS     r1,#1                 ;678
00004c  9102              STR      r1,[sp,#8]            ;678
00004e  4620              MOV      r0,r4                 ;679
000050  462c              MOV      r4,r5                 ;679
000052  4605              MOV      r5,r0                 ;679
000054  4630              MOV      r0,r6                 ;680
000056  463e              MOV      r6,r7                 ;680
000058  4607              MOV      r7,r0                 ;680
00005a  fa1ff088          UXTH     r0,r8                 ;681
00005e  46c8              MOV      r8,r9                 ;681
000060  4681              MOV      r9,r0                 ;681
000062  bf00              NOP                            ;682
                  |L13.100|
000064  42a6              CMP      r6,r4                 ;683
000066  dd01              BLE      |L13.108|
000068  2001              MOVS     r0,#1                 ;683
00006a  e001              B        |L13.112|
                  |L13.108|
00006c  f04f30ff          MOV      r0,#0xffffffff        ;683
                  |L13.112|
000070  9006              STR      r0,[sp,#0x18]         ;683
000072  42af              CMP      r7,r5                 ;684
000074  dd01              BLE      |L13.122|
000076  2001              MOVS     r0,#1                 ;684
000078  e001              B        |L13.126|
                  |L13.122|
00007a  f04f30ff          MOV      r0,#0xffffffff        ;684
                  |L13.126|
00007e  9005              STR      r0,[sp,#0x14]         ;684
000080  46a2              MOV      r10,r4                ;685
000082  9501              STR      r5,[sp,#4]            ;686
000084  ea4f0049          LSL      r0,r9,#1              ;687
000088  9004              STR      r0,[sp,#0x10]         ;687
00008a  eba90008          SUB      r0,r9,r8              ;688
00008e  0040              LSLS     r0,r0,#1              ;688
000090  9003              STR      r0,[sp,#0xc]          ;688
000092  9804              LDR      r0,[sp,#0x10]         ;689
000094  eba00b08          SUB      r11,r0,r8             ;689
000098  e01e              B        |L13.216|
                  |L13.154|
00009a  f1bb0f00          CMP      r11,#0                ;692
00009e  da02              BGE      |L13.166|
0000a0  9804              LDR      r0,[sp,#0x10]         ;694
0000a2  4483              ADD      r11,r11,r0            ;694
0000a4  e005              B        |L13.178|
                  |L13.166|
0000a6  9905              LDR      r1,[sp,#0x14]         ;698
0000a8  9801              LDR      r0,[sp,#4]            ;698
0000aa  4408              ADD      r0,r0,r1              ;698
0000ac  9001              STR      r0,[sp,#4]            ;698
0000ae  9803              LDR      r0,[sp,#0xc]          ;699
0000b0  4483              ADD      r11,r11,r0            ;699
                  |L13.178|
0000b2  9802              LDR      r0,[sp,#8]            ;701
0000b4  b138              CBZ      r0,|L13.198|
0000b6  fa1ff18a          UXTH     r1,r10                ;703
0000ba  9a01              LDR      r2,[sp,#4]            ;703
0000bc  b290              UXTH     r0,r2                 ;703
0000be  9a10              LDR      r2,[sp,#0x40]         ;703
0000c0  f7fffffe          BL       SPFD5420_PutPixel
0000c4  e006              B        |L13.212|
                  |L13.198|
0000c6  9a01              LDR      r2,[sp,#4]            ;707
0000c8  b291              UXTH     r1,r2                 ;707
0000ca  fa1ff08a          UXTH     r0,r10                ;707
0000ce  9a10              LDR      r2,[sp,#0x40]         ;707
0000d0  f7fffffe          BL       SPFD5420_PutPixel
                  |L13.212|
0000d4  9806              LDR      r0,[sp,#0x18]         ;709
0000d6  4482              ADD      r10,r10,r0            ;709
                  |L13.216|
0000d8  45b2              CMP      r10,r6                ;690
0000da  d1de              BNE      |L13.154|
0000dc  bf00              NOP      
0000de  e79f              B        |L13.32|
;;;712    
                          ENDP


                          AREA ||i.SPFD5420_DrawRect||, CODE, READONLY, ALIGN=1

                  SPFD5420_DrawRect PROC
;;;871    */
;;;872    void SPFD5420_DrawRect(uint16_t _usX, uint16_t _usY, uint8_t _usHeight, uint16_t _usWidth, uint16_t _usColor)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;873    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;874    	/*
;;;875    	 ---------------->---
;;;876    	|(_usX，_usY)        |
;;;877    	V                    V  _usHeight
;;;878    	|                    |
;;;879    	 ---------------->---
;;;880    		  _usWidth
;;;881    	*/
;;;882    
;;;883    	SPFD5420_DrawLine(_usX, _usY, _usX + _usWidth - 1, _usY, _usColor);	/* 顶 */
000010  19e0              ADDS     r0,r4,r7
000012  1e40              SUBS     r0,r0,#1
000014  b282              UXTH     r2,r0
000016  462b              MOV      r3,r5
000018  4629              MOV      r1,r5
00001a  4620              MOV      r0,r4
00001c  f8cd8000          STR      r8,[sp,#0]
000020  f7fffffe          BL       SPFD5420_DrawLine
;;;884    	SPFD5420_DrawLine(_usX, _usY + _usHeight - 1, _usX + _usWidth - 1, _usY + _usHeight - 1, _usColor);	/* 底 */
000024  19a8              ADDS     r0,r5,r6
000026  1e40              SUBS     r0,r0,#1
000028  b283              UXTH     r3,r0
00002a  19e0              ADDS     r0,r4,r7
00002c  1e40              SUBS     r0,r0,#1
00002e  b282              UXTH     r2,r0
000030  19a8              ADDS     r0,r5,r6
000032  1e40              SUBS     r0,r0,#1
000034  b281              UXTH     r1,r0
000036  4620              MOV      r0,r4
000038  f8cd8000          STR      r8,[sp,#0]
00003c  f7fffffe          BL       SPFD5420_DrawLine
;;;885    
;;;886    	SPFD5420_DrawLine(_usX, _usY, _usX, _usY + _usHeight - 1, _usColor);	/* 左 */
000040  19a8              ADDS     r0,r5,r6
000042  1e40              SUBS     r0,r0,#1
000044  b283              UXTH     r3,r0
000046  4622              MOV      r2,r4
000048  4629              MOV      r1,r5
00004a  4620              MOV      r0,r4
00004c  f8cd8000          STR      r8,[sp,#0]
000050  f7fffffe          BL       SPFD5420_DrawLine
;;;887    	SPFD5420_DrawLine(_usX + _usWidth - 1, _usY, _usX + _usWidth - 1, _usY + _usHeight, _usColor);	/* 右 */
000054  19a9              ADDS     r1,r5,r6
000056  b28b              UXTH     r3,r1
000058  19e1              ADDS     r1,r4,r7
00005a  1e49              SUBS     r1,r1,#1
00005c  b28a              UXTH     r2,r1
00005e  19e1              ADDS     r1,r4,r7
000060  1e49              SUBS     r1,r1,#1
000062  b288              UXTH     r0,r1
000064  4629              MOV      r1,r5
000066  f8cd8000          STR      r8,[sp,#0]
00006a  f7fffffe          BL       SPFD5420_DrawLine
;;;888    }
00006e  e8bd83f8          POP      {r3-r9,pc}
;;;889    
                          ENDP


                          AREA ||i.SPFD5420_DrawVLine||, CODE, READONLY, ALIGN=2

                  SPFD5420_DrawVLine PROC
;;;790    */
;;;791    void SPFD5420_DrawVLine(uint16_t _usX1 , uint16_t _usY1 , uint16_t _usY2 , uint16_t _usColor)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;792    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;793    	uint16_t i;
;;;794    
;;;795    	/* 展开 SPFD5420_SetCursor(_usX1, _usY1) 函数，提高执行效率 */
;;;796    	/*
;;;797    		px，py 是物理坐标， x，y是虚拟坐标
;;;798    		转换公式:
;;;799    		py = 399 - x;
;;;800    		px = y;
;;;801    	*/
;;;802    	SPFD5420_WriteReg(0x0200, _usY1);  		/* px */
00000c  4629              MOV      r1,r5
00000e  f44f7000          MOV      r0,#0x200
000012  f7fffffe          BL       SPFD5420_WriteReg
;;;803    	SPFD5420_WriteReg(0x0201, 399 - _usX1);	/* py */
000016  f240108f          MOV      r0,#0x18f
00001a  1b00              SUBS     r0,r0,r4
00001c  b281              UXTH     r1,r0
00001e  f2402001          MOV      r0,#0x201
000022  f7fffffe          BL       SPFD5420_WriteReg
;;;804    
;;;805    	/* 写显存 */
;;;806    	for (i = 1; i <= _usY2 - _usY1 + 1; i++)
000026  2601              MOVS     r6,#1
000028  e017              B        |L15.90|
                  |L15.42|
;;;807    	{
;;;808    		SPFD5420_REG = 0x202;
00002a  f2402002          MOV      r0,#0x202
00002e  f04f41c0          MOV      r1,#0x60000000
000032  8008              STRH     r0,[r1,#0]
;;;809    		SPFD5420_RAM = _usColor;
000034  480c              LDR      r0,|L15.104|
000036  f8a08000          STRH     r8,[r0,#0]
;;;810    
;;;811    		/* 展开 RA8875_SetCursor(_usX1, _usY1 + i) 函数 */
;;;812    		SPFD5420_WriteReg(0x0200, _usY1 + i);  		/* px */
00003a  19a8              ADDS     r0,r5,r6
00003c  b281              UXTH     r1,r0
00003e  f44f7000          MOV      r0,#0x200
000042  f7fffffe          BL       SPFD5420_WriteReg
;;;813    		SPFD5420_WriteReg(0x0201, 399 - _usX1);	/* py */
000046  f240108f          MOV      r0,#0x18f
00004a  1b00              SUBS     r0,r0,r4
00004c  b281              UXTH     r1,r0
00004e  f2402001          MOV      r0,#0x201
000052  f7fffffe          BL       SPFD5420_WriteReg
000056  1c70              ADDS     r0,r6,#1              ;806
000058  b286              UXTH     r6,r0                 ;806
                  |L15.90|
00005a  1b78              SUBS     r0,r7,r5              ;806
00005c  1c40              ADDS     r0,r0,#1              ;806
00005e  42b0              CMP      r0,r6                 ;806
000060  dae3              BGE      |L15.42|
;;;814    	}
;;;815    }
000062  e8bd81f0          POP      {r4-r8,pc}
;;;816    
                          ENDP

000066  0000              DCW      0x0000
                  |L15.104|
                          DCD      0x60080000

                          AREA ||i.SPFD5420_GetPixel||, CODE, READONLY, ALIGN=2

                  SPFD5420_GetPixel PROC
;;;601    */
;;;602    uint16_t SPFD5420_GetPixel(uint16_t _usX, uint16_t _usY)
000000  b570              PUSH     {r4-r6,lr}
;;;603    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;604    	uint16_t usRGB;
;;;605    
;;;606    	SPFD5420_SetCursor(_usX, _usY);	/* 设置光标位置 */
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       SPFD5420_SetCursor
;;;607    
;;;608    	{
;;;609    		/* 准备写显存 */
;;;610    		SPFD5420_REG = 0x202;
00000e  f2402002          MOV      r0,#0x202
000012  f04f41c0          MOV      r1,#0x60000000
000016  8008              STRH     r0,[r1,#0]
;;;611    
;;;612    		usRGB = SPFD5420_RAM;
000018  4806              LDR      r0,|L16.52|
00001a  8806              LDRH     r6,[r0,#0]
;;;613     	    usRGB = SPFD5420_RAM;
00001c  8806              LDRH     r6,[r0,#0]
;;;614    		/* 读 16-bit GRAM Reg */
;;;615    		if (s_RGBChgEn == 1)
00001e  4806              LDR      r0,|L16.56|
000020  7800              LDRB     r0,[r0,#0]  ; s_RGBChgEn
000022  2801              CMP      r0,#1
000024  d103              BNE      |L16.46|
;;;616    		{
;;;617    			usRGB = SPFD5420_BGR2RGB(usRGB);
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       SPFD5420_BGR2RGB
00002c  4606              MOV      r6,r0
                  |L16.46|
;;;618    		}
;;;619    	}
;;;620    
;;;621    	return usRGB;
00002e  4630              MOV      r0,r6
;;;622    }
000030  bd70              POP      {r4-r6,pc}
;;;623    
                          ENDP

000032  0000              DCW      0x0000
                  |L16.52|
                          DCD      0x60080000
                  |L16.56|
                          DCD      s_RGBChgEn

                          AREA ||i.SPFD5420_InitHard||, CODE, READONLY, ALIGN=2

                  SPFD5420_InitHard PROC
;;;464    */
;;;465    void SPFD5420_InitHard(void)
000000  b570              PUSH     {r4-r6,lr}
;;;466    {
;;;467    	uint16_t id;
;;;468    
;;;469    	id = SPFD5420_ReadReg(0x0000);  	/* 读取LCD驱动芯片ID */
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       SPFD5420_ReadReg
000008  4604              MOV      r4,r0
;;;470    	if ((id == 0x5420) || (id == 0x5520))	/* 4001屏和5420相同，4001屏读回显存RGB时，需要进行转换，5420无需 */
00000a  f5a440a8          SUB      r0,r4,#0x5400
00000e  3820              SUBS     r0,r0,#0x20
000010  d002              BEQ      |L17.24|
000012  f5b07080          SUBS     r0,r0,#0x100
000016  d140              BNE      |L17.154|
                  |L17.24|
;;;471    	{
;;;472    		Init_5420_4001();	/* 初始化5420和4001屏硬件 */
000018  f7fffffe          BL       Init_5420_4001
;;;473    
;;;474    		/* 下面这段代码用于识别是4001屏还是5420屏 */
;;;475    		{
;;;476    			uint16_t dummy;
;;;477    
;;;478    			SPFD5420_WriteReg(0x0200, 0);
00001c  2100              MOVS     r1,#0
00001e  f44f7000          MOV      r0,#0x200
000022  f7fffffe          BL       SPFD5420_WriteReg
;;;479    			SPFD5420_WriteReg(0x0201, 0);
000026  2100              MOVS     r1,#0
000028  f2402001          MOV      r0,#0x201
00002c  f7fffffe          BL       SPFD5420_WriteReg
;;;480    
;;;481    			SPFD5420_REG = 0x0202;
000030  f2402002          MOV      r0,#0x202
000034  f04f41c0          MOV      r1,#0x60000000
000038  8008              STRH     r0,[r1,#0]
;;;482    			SPFD5420_RAM = 0x1234;		/* 写一个像素 */
00003a  f2412034          MOV      r0,#0x1234
00003e  4921              LDR      r1,|L17.196|
000040  8008              STRH     r0,[r1,#0]
;;;483    
;;;484    			SPFD5420_WriteReg(0x0200, 0);
000042  2100              MOVS     r1,#0
000044  f44f7000          MOV      r0,#0x200
000048  f7fffffe          BL       SPFD5420_WriteReg
;;;485    			SPFD5420_WriteReg(0x0201, 0);
00004c  2100              MOVS     r1,#0
00004e  f2402001          MOV      r0,#0x201
000052  f7fffffe          BL       SPFD5420_WriteReg
;;;486    			SPFD5420_REG = 0x0202;
000056  f2402002          MOV      r0,#0x202
00005a  f04f41c0          MOV      r1,#0x60000000
00005e  8008              STRH     r0,[r1,#0]
;;;487    			dummy = SPFD5420_RAM; 		/* 读回颜色值 */
000060  4818              LDR      r0,|L17.196|
000062  8805              LDRH     r5,[r0,#0]
;;;488     			dummy = SPFD5420_RAM; 		/* 读回颜色值 */
000064  8805              LDRH     r5,[r0,#0]
;;;489    			if (dummy == 0x1234)
000066  f5a55090          SUB      r0,r5,#0x1200
00006a  3834              SUBS     r0,r0,#0x34
00006c  d106              BNE      |L17.124|
;;;490    			{
;;;491    				s_RGBChgEn = 0;
00006e  4916              LDR      r1,|L17.200|
000070  7008              STRB     r0,[r1,#0]
;;;492    
;;;493    				g_ChipID = IC_5420;
000072  f2454020          MOV      r0,#0x5420
000076  4915              LDR      r1,|L17.204|
000078  8008              STRH     r0,[r1,#0]
00007a  e006              B        |L17.138|
                  |L17.124|
;;;494    			}
;;;495    			else
;;;496    			{
;;;497    				s_RGBChgEn = 1;		/* 如果读回的和写入的不同，则需要RGB转换, 只影响读取像素的函数 */
00007c  2001              MOVS     r0,#1
00007e  4912              LDR      r1,|L17.200|
000080  7008              STRB     r0,[r1,#0]
;;;498    
;;;499    				g_ChipID = IC_4001;
000082  f2440001          MOV      r0,#0x4001
000086  4911              LDR      r1,|L17.204|
000088  8008              STRH     r0,[r1,#0]
                  |L17.138|
;;;500    			}
;;;501    			g_LcdHeight = LCD_30_HEIGHT;
00008a  20f0              MOVS     r0,#0xf0
00008c  4910              LDR      r1,|L17.208|
00008e  8008              STRH     r0,[r1,#0]
;;;502    			g_LcdWidth = LCD_30_WIDTH;
000090  f44f70c8          MOV      r0,#0x190
000094  490f              LDR      r1,|L17.212|
000096  8008              STRH     r0,[r1,#0]
;;;503    		}
000098  e013              B        |L17.194|
                  |L17.154|
;;;504    	}
;;;505    	else if (id == 0xB509)
00009a  f5a44035          SUB      r0,r4,#0xb500
00009e  3809              SUBS     r0,r0,#9
0000a0  d10f              BNE      |L17.194|
;;;506    	{
;;;507    		Init_61509();		/* 初始化61509屏硬件 */
0000a2  f7fffffe          BL       Init_61509
;;;508    
;;;509    		s_RGBChgEn = 1;			/* 如果读回的和写入的不同，则需要RGB转换, 只影响读取像素的函数 */
0000a6  2001              MOVS     r0,#1
0000a8  4907              LDR      r1,|L17.200|
0000aa  7008              STRB     r0,[r1,#0]
;;;510    
;;;511    		g_ChipID = IC_61509;
0000ac  f24b5009          MOV      r0,#0xb509
0000b0  4906              LDR      r1,|L17.204|
0000b2  8008              STRH     r0,[r1,#0]
;;;512    		g_LcdHeight = LCD_30_HEIGHT;
0000b4  20f0              MOVS     r0,#0xf0
0000b6  4906              LDR      r1,|L17.208|
0000b8  8008              STRH     r0,[r1,#0]
;;;513    		g_LcdWidth = LCD_30_WIDTH;
0000ba  f44f70c8          MOV      r0,#0x190
0000be  4905              LDR      r1,|L17.212|
0000c0  8008              STRH     r0,[r1,#0]
                  |L17.194|
;;;514    	}
;;;515    }
0000c2  bd70              POP      {r4-r6,pc}
;;;516    
                          ENDP

                  |L17.196|
                          DCD      0x60080000
                  |L17.200|
                          DCD      s_RGBChgEn
                  |L17.204|
                          DCD      g_ChipID
                  |L17.208|
                          DCD      g_LcdHeight
                  |L17.212|
                          DCD      g_LcdWidth

                          AREA ||i.SPFD5420_PutPixel||, CODE, READONLY, ALIGN=2

                  SPFD5420_PutPixel PROC
;;;581    */
;;;582    void SPFD5420_PutPixel(uint16_t _usX, uint16_t _usY, uint16_t _usColor)
000000  b570              PUSH     {r4-r6,lr}
;;;583    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;584    	SPFD5420_SetCursor(_usX, _usY);	/* 设置光标位置 */
000008  4631              MOV      r1,r6
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       SPFD5420_SetCursor
;;;585    
;;;586    	/* 写显存 */
;;;587    	SPFD5420_REG = 0x202;
000010  f2402002          MOV      r0,#0x202
000014  f04f41c0          MOV      r1,#0x60000000
000018  8008              STRH     r0,[r1,#0]
;;;588    	/* Write 16-bit GRAM Reg */
;;;589    	SPFD5420_RAM = _usColor;
00001a  4801              LDR      r0,|L18.32|
00001c  8004              STRH     r4,[r0,#0]
;;;590    }
00001e  bd70              POP      {r4-r6,pc}
;;;591    
                          ENDP

                  |L18.32|
                          DCD      0x60080000

                          AREA ||i.SPFD5420_QuitWinMode||, CODE, READONLY, ALIGN=2

                  SPFD5420_QuitWinMode PROC
;;;231    */
;;;232    static void SPFD5420_QuitWinMode(void)
000000  b510              PUSH     {r4,lr}
;;;233    {
;;;234    	SPFD5420_SetDispWin(0, 0, g_LcdHeight, g_LcdWidth);
000002  4804              LDR      r0,|L19.20|
000004  8803              LDRH     r3,[r0,#0]  ; g_LcdWidth
000006  4804              LDR      r0,|L19.24|
000008  8802              LDRH     r2,[r0,#0]  ; g_LcdHeight
00000a  2100              MOVS     r1,#0
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       SPFD5420_SetDispWin
;;;235    }
000012  bd10              POP      {r4,pc}
;;;236    
                          ENDP

                  |L19.20|
                          DCD      g_LcdWidth
                  |L19.24|
                          DCD      g_LcdHeight

                          AREA ||i.SPFD5420_ReadID||, CODE, READONLY, ALIGN=1

                  SPFD5420_ReadID PROC
;;;244    */
;;;245    uint16_t SPFD5420_ReadID(void)
000000  b510              PUSH     {r4,lr}
;;;246    {
;;;247    	return SPFD5420_ReadReg(0x0000);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       SPFD5420_ReadReg
;;;248    }
000008  bd10              POP      {r4,pc}
;;;249    
                          ENDP


                          AREA ||i.SPFD5420_ReadReg||, CODE, READONLY, ALIGN=2

                  SPFD5420_ReadReg PROC
;;;104    */
;;;105    static uint16_t SPFD5420_ReadReg(__IO uint16_t _usAddr)
000000  b501              PUSH     {r0,lr}
;;;106    {
;;;107    	/* Write 16-bit Index (then Read Reg) */
;;;108    	SPFD5420_REG = _usAddr;
000002  f8bd0000          LDRH     r0,[sp,#0]
000006  f04f41c0          MOV      r1,#0x60000000
00000a  8008              STRH     r0,[r1,#0]
;;;109    	/* Read 16-bit Reg */
;;;110    	return (SPFD5420_RAM);
00000c  4801              LDR      r0,|L21.20|
00000e  8800              LDRH     r0,[r0,#0]
;;;111    }
000010  bd08              POP      {r3,pc}
;;;112    
                          ENDP

000012  0000              DCW      0x0000
                  |L21.20|
                          DCD      0x60080000

                          AREA ||i.SPFD5420_SetBackLight||, CODE, READONLY, ALIGN=2

                  SPFD5420_SetBackLight PROC
;;;972    */
;;;973    void SPFD5420_SetBackLight(uint8_t _bright)
000000  b510              PUSH     {r4,lr}
;;;974    {
000002  b08a              SUB      sp,sp,#0x28
000004  4604              MOV      r4,r0
;;;975    #if 1	/* STM32-X2 使用PC6 输出PWM,  内部TIM8的CH1通道 */
;;;976    	GPIO_InitTypeDef GPIO_InitStructure;
;;;977    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;978    	TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;979    
;;;980    	/* 第1步：打开GPIO 时钟	*/
;;;981    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
000006  2101              MOVS     r1,#1
000008  2004              MOVS     r0,#4
00000a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;982    
;;;983    	if (_bright == 0)
00000e  b9b4              CBNZ     r4,|L22.62|
;;;984    	{
;;;985    		/* 配置背光GPIO为推挽输出模式 */
;;;986    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
000010  2040              MOVS     r0,#0x40
000012  9008              STR      r0,[sp,#0x20]
;;;987    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
000014  2001              MOVS     r0,#1
000016  f88d0024          STRB     r0,[sp,#0x24]
;;;988    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
00001a  2003              MOVS     r0,#3
00001c  f88d0025          STRB     r0,[sp,#0x25]
;;;989    		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000020  2000              MOVS     r0,#0
000022  f88d0026          STRB     r0,[sp,#0x26]
;;;990    		GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;	
000026  f88d0027          STRB     r0,[sp,#0x27]
;;;991    		GPIO_Init(GPIOC, &GPIO_InitStructure);
00002a  a908              ADD      r1,sp,#0x20
00002c  4835              LDR      r0,|L22.260|
00002e  f7fffffe          BL       GPIO_Init
;;;992    
;;;993    		GPIO_SetBits(GPIOC, GPIO_Pin_6);
000032  2140              MOVS     r1,#0x40
000034  4833              LDR      r0,|L22.260|
000036  f7fffffe          BL       GPIO_SetBits
                  |L22.58|
;;;994    		return;
;;;995    	}
;;;996    	else if (_bright == BRIGHT_MAX)	/* 最大亮度 */
;;;997    	{
;;;998    		/* 配置背光GPIO为推挽输出模式 */
;;;999    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
;;;1000   		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
;;;1001   		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
;;;1002   		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;1003   		GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
;;;1004           GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;1005   		
;;;1006   		GPIO_SetBits(GPIOC, GPIO_Pin_6);
;;;1007   
;;;1008   		/* 关闭TIM8 */
;;;1009   		TIM_Cmd(TIM8, DISABLE);
;;;1010   		return;
;;;1011   	}
;;;1012   
;;;1013   	/* 配置背光GPIO为复用推挽输出模式 */
;;;1014   	GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_TIM8);
;;;1015   
;;;1016   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;1017   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
;;;1018   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;1019   	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
;;;1020   
;;;1021   	/* 使能TIM8的时钟 */
;;;1022   	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
;;;1023   
;;;1024   	/*
;;;1025   		TIM3 配置: 产生1路PWM信号;
;;;1026   		TIM3CLK = 72 MHz, Prescaler = 0(不分频), TIM3 counter clock = 72 MHz
;;;1027   		计算公式：
;;;1028   		PWM输出频率 = TIM3 counter clock /(ARR + 1)
;;;1029   
;;;1030   		我们期望设置为100Hz
;;;1031   
;;;1032   		如果不对TIM3CLK预分频，那么不可能得到100Hz低频。
;;;1033   		我们设置分频比 = 1000， 那么  TIM3 counter clock = 72KHz
;;;1034   		TIM_Period = 720 - 1;
;;;1035   		频率下不来。
;;;1036   	 */
;;;1037   	TIM_TimeBaseStructure.TIM_Period = 720 - 1;	/* TIM_Period = TIM3 ARR Register */
;;;1038   	TIM_TimeBaseStructure.TIM_Prescaler = 0;
;;;1039   	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
;;;1040   	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
;;;1041   
;;;1042   	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);
;;;1043   
;;;1044   	/* PWM1 Mode configuration: Channel1 */
;;;1045   	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
;;;1046   	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
;;;1047   	/*
;;;1048   		_bright = 1 时, TIM_Pulse = 1
;;;1049   		_bright = 255 时, TIM_Pulse = TIM_Period
;;;1050   	*/
;;;1051   	TIM_OCInitStructure.TIM_Pulse = (TIM_TimeBaseStructure.TIM_Period * _bright) / BRIGHT_MAX;	/* 改变占空比 */
;;;1052   
;;;1053   	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
;;;1054   	TIM_OC1Init(TIM8, &TIM_OCInitStructure);
;;;1055   	TIM_OC1PreloadConfig(TIM8, TIM_OCPreload_Enable);
;;;1056   
;;;1057   	TIM_ARRPreloadConfig(TIM8, ENABLE);
;;;1058   
;;;1059   	/* 使能 TIM8 定时器 */
;;;1060   	TIM_Cmd(TIM8, ENABLE);
;;;1061   
;;;1062   	/* 下面这句话对于TIM1和TIM8是必须的，对于TIM2-TIM6则不必要 */
;;;1063   	TIM_CtrlPWMOutputs(TIM8, ENABLE);
;;;1064   
;;;1065   #else	/* STM32-V2, STM32-V3 板子使用 PB1 输出PWM信号进行背景光调节 */
;;;1066   
;;;1067   	GPIO_InitTypeDef GPIO_InitStructure;
;;;1068   	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;1069   	TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;1070   
;;;1071   	/* 第1步：打开GPIOB RCC_APB2Periph_AFIO 的时钟	*/
;;;1072   	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);
;;;1073   
;;;1074   	if (_bright == 0)
;;;1075   	{
;;;1076   		/* 配置背光GPIO为输入模式 */
;;;1077   		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
;;;1078   		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
;;;1079   		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;1080   		GPIO_Init(GPIOB, &GPIO_InitStructure);
;;;1081   
;;;1082   		/* 关闭TIM3 */
;;;1083   		TIM_Cmd(TIM3, DISABLE);
;;;1084   		return;
;;;1085   	}
;;;1086   	else if (_bright == BRIGHT_MAX)	/* 最大亮度 */
;;;1087   	{
;;;1088   		/* 配置背光GPIO为推挽输出模式 */
;;;1089   		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
;;;1090   		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
;;;1091   		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;1092   		GPIO_Init(GPIOB, &GPIO_InitStructure);
;;;1093   
;;;1094   		GPIO_SetBits(GPIOB, GPIO_Pin_1);
;;;1095   
;;;1096   		/* 关闭TIM3 */
;;;1097   		TIM_Cmd(TIM3, DISABLE);
;;;1098   		return;
;;;1099   	}
;;;1100   
;;;1101   	/* 配置背光GPIO为复用推挽输出模式 */
;;;1102   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
;;;1103   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
;;;1104   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;1105   	GPIO_Init(GPIOB, &GPIO_InitStructure);
;;;1106   
;;;1107   	/* 使能TIM3的时钟 */
;;;1108   	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
;;;1109   
;;;1110   	/*
;;;1111   		TIM3 配置: 产生1路PWM信号;
;;;1112   		TIM3CLK = 72 MHz, Prescaler = 0(不分频), TIM3 counter clock = 72 MHz
;;;1113   		计算公式：
;;;1114   		PWM输出频率 = TIM3 counter clock /(ARR + 1)
;;;1115   
;;;1116   		我们期望设置为100Hz
;;;1117   
;;;1118   		如果不对TIM3CLK预分频，那么不可能得到100Hz低频。
;;;1119   		我们设置分频比 = 1000， 那么  TIM3 counter clock = 72KHz
;;;1120   		TIM_Period = 720 - 1;
;;;1121   		频率下不来。
;;;1122   	 */
;;;1123   	TIM_TimeBaseStructure.TIM_Period = 720 - 1;	/* TIM_Period = TIM3 ARR Register */
;;;1124   	TIM_TimeBaseStructure.TIM_Prescaler = 0;
;;;1125   	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
;;;1126   	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
;;;1127   
;;;1128   	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
;;;1129   
;;;1130   	/* PWM1 Mode configuration: Channel1 */
;;;1131   	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
;;;1132   	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
;;;1133   	/*
;;;1134   		_bright = 1 时, TIM_Pulse = 1
;;;1135   		_bright = 255 时, TIM_Pulse = TIM_Period
;;;1136   	*/
;;;1137   	TIM_OCInitStructure.TIM_Pulse = (TIM_TimeBaseStructure.TIM_Period * _bright) / BRIGHT_MAX;	/* 改变占空比 */
;;;1138   
;;;1139   	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
;;;1140   	TIM_OC4Init(TIM3, &TIM_OCInitStructure);
;;;1141   	TIM_OC4PreloadConfig(TIM3, TIM_OCPreload_Enable);
;;;1142   
;;;1143   	TIM_ARRPreloadConfig(TIM3, ENABLE);
;;;1144   
;;;1145   	/* 使能 TIM3 定时器 */
;;;1146   	TIM_Cmd(TIM3, ENABLE);
;;;1147   #endif
;;;1148   }
00003a  b00a              ADD      sp,sp,#0x28
00003c  bd10              POP      {r4,pc}
                  |L22.62|
00003e  2cff              CMP      r4,#0xff              ;996
000040  d119              BNE      |L22.118|
000042  2040              MOVS     r0,#0x40              ;999
000044  9008              STR      r0,[sp,#0x20]         ;999
000046  2001              MOVS     r0,#1                 ;1000
000048  f88d0024          STRB     r0,[sp,#0x24]         ;1000
00004c  2003              MOVS     r0,#3                 ;1001
00004e  f88d0025          STRB     r0,[sp,#0x25]         ;1001
000052  2000              MOVS     r0,#0                 ;1002
000054  f88d0026          STRB     r0,[sp,#0x26]         ;1002
000058  f88d0027          STRB     r0,[sp,#0x27]         ;1003
00005c  a908              ADD      r1,sp,#0x20           ;1004
00005e  4829              LDR      r0,|L22.260|
000060  f7fffffe          BL       GPIO_Init
000064  2140              MOVS     r1,#0x40              ;1006
000066  4827              LDR      r0,|L22.260|
000068  f7fffffe          BL       GPIO_SetBits
00006c  2100              MOVS     r1,#0                 ;1009
00006e  4826              LDR      r0,|L22.264|
000070  f7fffffe          BL       TIM_Cmd
000074  e7e1              B        |L22.58|
                  |L22.118|
000076  2203              MOVS     r2,#3                 ;1014
000078  2106              MOVS     r1,#6                 ;1014
00007a  4822              LDR      r0,|L22.260|
00007c  f7fffffe          BL       GPIO_PinAFConfig
000080  2002              MOVS     r0,#2                 ;1016
000082  f88d0024          STRB     r0,[sp,#0x24]         ;1016
000086  2003              MOVS     r0,#3                 ;1017
000088  f88d0025          STRB     r0,[sp,#0x25]         ;1017
00008c  2000              MOVS     r0,#0                 ;1018
00008e  f88d0026          STRB     r0,[sp,#0x26]         ;1018
000092  f88d0027          STRB     r0,[sp,#0x27]         ;1019
000096  2101              MOVS     r1,#1                 ;1022
000098  2002              MOVS     r0,#2                 ;1022
00009a  f7fffffe          BL       RCC_APB2PeriphClockCmd
00009e  f24020cf          MOV      r0,#0x2cf             ;1037
0000a2  9006              STR      r0,[sp,#0x18]         ;1037
0000a4  2000              MOVS     r0,#0                 ;1038
0000a6  f8ad0014          STRH     r0,[sp,#0x14]         ;1038
0000aa  f8ad001c          STRH     r0,[sp,#0x1c]         ;1039
0000ae  f8ad0016          STRH     r0,[sp,#0x16]         ;1040
0000b2  a905              ADD      r1,sp,#0x14           ;1042
0000b4  4814              LDR      r0,|L22.264|
0000b6  f7fffffe          BL       TIM_TimeBaseInit
0000ba  2060              MOVS     r0,#0x60              ;1045
0000bc  f8ad0000          STRH     r0,[sp,#0]            ;1045
0000c0  2001              MOVS     r0,#1                 ;1046
0000c2  f8ad0002          STRH     r0,[sp,#2]            ;1046
0000c6  9806              LDR      r0,[sp,#0x18]         ;1051
0000c8  4360              MULS     r0,r4,r0              ;1051
0000ca  21ff              MOVS     r1,#0xff              ;1051
0000cc  fbb0f0f1          UDIV     r0,r0,r1              ;1051
0000d0  9002              STR      r0,[sp,#8]            ;1051
0000d2  2000              MOVS     r0,#0                 ;1053
0000d4  f8ad000c          STRH     r0,[sp,#0xc]          ;1053
0000d8  4669              MOV      r1,sp                 ;1054
0000da  480b              LDR      r0,|L22.264|
0000dc  f7fffffe          BL       TIM_OC1Init
0000e0  2108              MOVS     r1,#8                 ;1055
0000e2  4809              LDR      r0,|L22.264|
0000e4  f7fffffe          BL       TIM_OC1PreloadConfig
0000e8  2101              MOVS     r1,#1                 ;1057
0000ea  4807              LDR      r0,|L22.264|
0000ec  f7fffffe          BL       TIM_ARRPreloadConfig
0000f0  2101              MOVS     r1,#1                 ;1060
0000f2  4805              LDR      r0,|L22.264|
0000f4  f7fffffe          BL       TIM_Cmd
0000f8  2101              MOVS     r1,#1                 ;1063
0000fa  4803              LDR      r0,|L22.264|
0000fc  f7fffffe          BL       TIM_CtrlPWMOutputs
000100  bf00              NOP      
000102  e79a              B        |L22.58|
;;;1149   
                          ENDP

                  |L22.260|
                          DCD      0x40020800
                  |L22.264|
                          DCD      0x40010400

                          AREA ||i.SPFD5420_SetCursor||, CODE, READONLY, ALIGN=1

                  SPFD5420_SetCursor PROC
;;;189    */
;;;190    static void SPFD5420_SetCursor(uint16_t _usX, uint16_t _usY)
000000  b570              PUSH     {r4-r6,lr}
;;;191    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;192    	/*
;;;193    		px，py 是物理坐标， x，y是虚拟坐标
;;;194    		转换公式:
;;;195    		py = 399 - x;
;;;196    		px = y;
;;;197    	*/
;;;198    
;;;199    	SPFD5420_WriteReg(0x0200, _usY);  		/* px */
000006  4629              MOV      r1,r5
000008  f44f7000          MOV      r0,#0x200
00000c  f7fffffe          BL       SPFD5420_WriteReg
;;;200    	SPFD5420_WriteReg(0x0201, 399 - _usX);	/* py */
000010  f240108f          MOV      r0,#0x18f
000014  1b00              SUBS     r0,r0,r4
000016  b281              UXTH     r1,r0
000018  f2402001          MOV      r0,#0x201
00001c  f7fffffe          BL       SPFD5420_WriteReg
;;;201    }
000020  bd70              POP      {r4-r6,pc}
;;;202    
                          ENDP


                          AREA ||i.SPFD5420_SetDispWin||, CODE, READONLY, ALIGN=1

                  SPFD5420_SetDispWin PROC
;;;125    */
;;;126    static void SPFD5420_SetDispWin(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;127    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;128    	uint16_t px, py;
;;;129    	/*
;;;130    		240x400屏幕物理坐标(px,py)如下:
;;;131    		    R003 = 0x1018                  R003 = 0x1008
;;;132    		  -------------------          -------------------
;;;133    		 |(0,0)              |        |(0,0)              |
;;;134    		 |                   |        |					  |
;;;135    		 |  ^           ^    |        |   ^           ^   |
;;;136    		 |  |           |    |        |   |           |   |
;;;137    		 |  |           |    |        |   |           |   |
;;;138    		 |  |           |    |        |   |           |   |
;;;139    		 |  |  ------>  |    |        |   | <------   |   |
;;;140    		 |  |           |    |        |   |           |   |
;;;141    		 |  |           |    |        |   |           |   |
;;;142    		 |  |           |    |        |   |           |   |
;;;143    		 |  |           |    |        |   |           |   |
;;;144    		 |                   |        |					  |
;;;145    		 |                   |        |                   |
;;;146    		 |      (x=239,y=399)|        |      (x=239,y=399)|
;;;147    		 |-------------------|        |-------------------|
;;;148    		 |                   |        |                   |
;;;149    		  -------------------          -------------------
;;;150    
;;;151    		按照安富莱开发板LCD的方向，我们期望的虚拟坐标和扫描方向如下：(和上图第1个吻合)
;;;152    		 --------------------------------
;;;153    		|  |(0,0)                        |
;;;154    		|  |     --------->              |
;;;155    		|  |         |                   |
;;;156    		|  |         |                   |
;;;157    		|  |         |                   |
;;;158    		|  |         V                   |
;;;159    		|  |     --------->              |
;;;160    		|  |                    (399,239)|
;;;161    		 --------------------------------
;;;162    	虚拟坐标和物理坐标转换关系：
;;;163    		x = 399 - py;
;;;164    		y = px;
;;;165    
;;;166    		py = 399 - x;
;;;167    		px = y;
;;;168    	*/
;;;169    
;;;170    	py = 399 - _usX;
00000c  f240108f          MOV      r0,#0x18f
000010  1b40              SUBS     r0,r0,r5
000012  fa1ff980          UXTH     r9,r0
;;;171    	px = _usY;
000016  46a0              MOV      r8,r4
;;;172    
;;;173    	/* 设置显示窗口 WINDOWS */
;;;174    	SPFD5420_WriteReg(0x0210, px);						/* 水平起始地址 */
000018  4641              MOV      r1,r8
00001a  f44f7004          MOV      r0,#0x210
00001e  f7fffffe          BL       SPFD5420_WriteReg
;;;175    	SPFD5420_WriteReg(0x0211, px + (_usHeight - 1));		/* 水平结束坐标 */
000022  1e70              SUBS     r0,r6,#1
000024  4440              ADD      r0,r0,r8
000026  b281              UXTH     r1,r0
000028  f2402011          MOV      r0,#0x211
00002c  f7fffffe          BL       SPFD5420_WriteReg
;;;176    	SPFD5420_WriteReg(0x0212, py + 1 - _usWidth);		/* 垂直起始地址 */
000030  f1090001          ADD      r0,r9,#1
000034  1bc0              SUBS     r0,r0,r7
000036  b281              UXTH     r1,r0
000038  f2402012          MOV      r0,#0x212
00003c  f7fffffe          BL       SPFD5420_WriteReg
;;;177    	SPFD5420_WriteReg(0x0213, py);						/* 垂直结束地址 */
000040  4649              MOV      r1,r9
000042  f2402013          MOV      r0,#0x213
000046  f7fffffe          BL       SPFD5420_WriteReg
;;;178    
;;;179    	SPFD5420_SetCursor(_usX, _usY);
00004a  4621              MOV      r1,r4
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       SPFD5420_SetCursor
;;;180    }
000052  e8bd87f0          POP      {r4-r10,pc}
;;;181    
                          ENDP


                          AREA ||i.SPFD5420_WriteReg||, CODE, READONLY, ALIGN=2

                  SPFD5420_WriteReg PROC
;;;86     */
;;;87     static void SPFD5420_WriteReg(__IO uint16_t _usAddr, uint16_t _usValue)
000000  b503              PUSH     {r0,r1,lr}
;;;88     {
;;;89     	/* Write 16-bit Index, then Write Reg */
;;;90     	SPFD5420_REG = _usAddr;
000002  f8bd0000          LDRH     r0,[sp,#0]
000006  f04f42c0          MOV      r2,#0x60000000
00000a  8010              STRH     r0,[r2,#0]
;;;91     	/* Write 16-bit Reg */
;;;92     	SPFD5420_RAM = _usValue;
00000c  4801              LDR      r0,|L25.20|
00000e  8001              STRH     r1,[r0,#0]
;;;93     }
000010  bd0c              POP      {r2,r3,pc}
;;;94     
                          ENDP

000012  0000              DCW      0x0000
                  |L25.20|
                          DCD      0x60080000

                          AREA ||.data||, DATA, ALIGN=0

                  s_RGBChgEn
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\LCD_SPFD5420.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_LCD_SPFD5420_c_a559b03d____REV16|
#line 129 "D:\\Keil_v4\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_LCD_SPFD5420_c_a559b03d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_LCD_SPFD5420_c_a559b03d____REVSH|
#line 144
|__asm___14_LCD_SPFD5420_c_a559b03d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
